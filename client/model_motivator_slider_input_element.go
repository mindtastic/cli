/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MotivatorSliderInputElement struct for MotivatorSliderInputElement
type MotivatorSliderInputElement struct {
	InputType string `json:"inputType"`
	// A string the range input shall be captioned with
	Label string `json:"label"`
	Options *MotivatorSliderInputElementOptions `json:"options,omitempty"`
}

// NewMotivatorSliderInputElement instantiates a new MotivatorSliderInputElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMotivatorSliderInputElement(inputType string, label string) *MotivatorSliderInputElement {
	this := MotivatorSliderInputElement{}
	this.InputType = inputType
	this.Label = label
	return &this
}

// NewMotivatorSliderInputElementWithDefaults instantiates a new MotivatorSliderInputElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMotivatorSliderInputElementWithDefaults() *MotivatorSliderInputElement {
	this := MotivatorSliderInputElement{}
	return &this
}

// GetInputType returns the InputType field value
func (o *MotivatorSliderInputElement) GetInputType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InputType
}

// GetInputTypeOk returns a tuple with the InputType field value
// and a boolean to check if the value has been set.
func (o *MotivatorSliderInputElement) GetInputTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InputType, true
}

// SetInputType sets field value
func (o *MotivatorSliderInputElement) SetInputType(v string) {
	o.InputType = v
}

// GetLabel returns the Label field value
func (o *MotivatorSliderInputElement) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *MotivatorSliderInputElement) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *MotivatorSliderInputElement) SetLabel(v string) {
	o.Label = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *MotivatorSliderInputElement) GetOptions() MotivatorSliderInputElementOptions {
	if o == nil || o.Options == nil {
		var ret MotivatorSliderInputElementOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MotivatorSliderInputElement) GetOptionsOk() (*MotivatorSliderInputElementOptions, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *MotivatorSliderInputElement) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given MotivatorSliderInputElementOptions and assigns it to the Options field.
func (o *MotivatorSliderInputElement) SetOptions(v MotivatorSliderInputElementOptions) {
	o.Options = &v
}

func (o MotivatorSliderInputElement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["inputType"] = o.InputType
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableMotivatorSliderInputElement struct {
	value *MotivatorSliderInputElement
	isSet bool
}

func (v NullableMotivatorSliderInputElement) Get() *MotivatorSliderInputElement {
	return v.value
}

func (v *NullableMotivatorSliderInputElement) Set(val *MotivatorSliderInputElement) {
	v.value = val
	v.isSet = true
}

func (v NullableMotivatorSliderInputElement) IsSet() bool {
	return v.isSet
}

func (v *NullableMotivatorSliderInputElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMotivatorSliderInputElement(val *MotivatorSliderInputElement) *NullableMotivatorSliderInputElement {
	return &NullableMotivatorSliderInputElement{value: val, isSet: true}
}

func (v NullableMotivatorSliderInputElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMotivatorSliderInputElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


