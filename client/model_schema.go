/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Schema A valid tilt document validates against the tilt schema: https://github.com/Transparency-Information-Language/schema/blob/master/tilt-schema.json
type Schema struct {
	Meta *SchemaMeta `json:"meta,omitempty"`
	Controller *SchemaController `json:"controller,omitempty"`
	DataProtectionOfficer *SchemaDataProtectionOfficer `json:"dataProtectionOfficer,omitempty"`
	DataDisclosed []SchemaDataDisclosedInner `json:"dataDisclosed,omitempty"`
	ThirdCountryTransfers []SchemaThirdCountryTransfersInner `json:"thirdCountryTransfers,omitempty"`
	AccessAndDataPortability *SchemaAccessAndDataPortability `json:"accessAndDataPortability,omitempty"`
	Sources []SchemaSourcesInner `json:"sources,omitempty"`
	RightToInformation *SchemaRightToInformation `json:"rightToInformation,omitempty"`
	RightToRectificationOrDeletion *SchemaRightToInformation `json:"rightToRectificationOrDeletion,omitempty"`
	RightToDataPortability *SchemaRightToInformation `json:"rightToDataPortability,omitempty"`
	RightToWithdrawConsent *SchemaRightToInformation `json:"rightToWithdrawConsent,omitempty"`
	RightToComplain *SchemaRightToComplain `json:"rightToComplain,omitempty"`
	AutomatedDecisionMaking *SchemaAutomatedDecisionMaking `json:"automatedDecisionMaking,omitempty"`
	ChangesOfPurpose []SchemaChangesOfPurposeInner `json:"changesOfPurpose,omitempty"`
}

// NewSchema instantiates a new Schema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchema() *Schema {
	this := Schema{}
	return &this
}

// NewSchemaWithDefaults instantiates a new Schema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaWithDefaults() *Schema {
	this := Schema{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Schema) GetMeta() SchemaMeta {
	if o == nil || o.Meta == nil {
		var ret SchemaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetMetaOk() (*SchemaMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Schema) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given SchemaMeta and assigns it to the Meta field.
func (o *Schema) SetMeta(v SchemaMeta) {
	o.Meta = &v
}

// GetController returns the Controller field value if set, zero value otherwise.
func (o *Schema) GetController() SchemaController {
	if o == nil || o.Controller == nil {
		var ret SchemaController
		return ret
	}
	return *o.Controller
}

// GetControllerOk returns a tuple with the Controller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetControllerOk() (*SchemaController, bool) {
	if o == nil || o.Controller == nil {
		return nil, false
	}
	return o.Controller, true
}

// HasController returns a boolean if a field has been set.
func (o *Schema) HasController() bool {
	if o != nil && o.Controller != nil {
		return true
	}

	return false
}

// SetController gets a reference to the given SchemaController and assigns it to the Controller field.
func (o *Schema) SetController(v SchemaController) {
	o.Controller = &v
}

// GetDataProtectionOfficer returns the DataProtectionOfficer field value if set, zero value otherwise.
func (o *Schema) GetDataProtectionOfficer() SchemaDataProtectionOfficer {
	if o == nil || o.DataProtectionOfficer == nil {
		var ret SchemaDataProtectionOfficer
		return ret
	}
	return *o.DataProtectionOfficer
}

// GetDataProtectionOfficerOk returns a tuple with the DataProtectionOfficer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetDataProtectionOfficerOk() (*SchemaDataProtectionOfficer, bool) {
	if o == nil || o.DataProtectionOfficer == nil {
		return nil, false
	}
	return o.DataProtectionOfficer, true
}

// HasDataProtectionOfficer returns a boolean if a field has been set.
func (o *Schema) HasDataProtectionOfficer() bool {
	if o != nil && o.DataProtectionOfficer != nil {
		return true
	}

	return false
}

// SetDataProtectionOfficer gets a reference to the given SchemaDataProtectionOfficer and assigns it to the DataProtectionOfficer field.
func (o *Schema) SetDataProtectionOfficer(v SchemaDataProtectionOfficer) {
	o.DataProtectionOfficer = &v
}

// GetDataDisclosed returns the DataDisclosed field value if set, zero value otherwise.
func (o *Schema) GetDataDisclosed() []SchemaDataDisclosedInner {
	if o == nil || o.DataDisclosed == nil {
		var ret []SchemaDataDisclosedInner
		return ret
	}
	return o.DataDisclosed
}

// GetDataDisclosedOk returns a tuple with the DataDisclosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetDataDisclosedOk() ([]SchemaDataDisclosedInner, bool) {
	if o == nil || o.DataDisclosed == nil {
		return nil, false
	}
	return o.DataDisclosed, true
}

// HasDataDisclosed returns a boolean if a field has been set.
func (o *Schema) HasDataDisclosed() bool {
	if o != nil && o.DataDisclosed != nil {
		return true
	}

	return false
}

// SetDataDisclosed gets a reference to the given []SchemaDataDisclosedInner and assigns it to the DataDisclosed field.
func (o *Schema) SetDataDisclosed(v []SchemaDataDisclosedInner) {
	o.DataDisclosed = v
}

// GetThirdCountryTransfers returns the ThirdCountryTransfers field value if set, zero value otherwise.
func (o *Schema) GetThirdCountryTransfers() []SchemaThirdCountryTransfersInner {
	if o == nil || o.ThirdCountryTransfers == nil {
		var ret []SchemaThirdCountryTransfersInner
		return ret
	}
	return o.ThirdCountryTransfers
}

// GetThirdCountryTransfersOk returns a tuple with the ThirdCountryTransfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetThirdCountryTransfersOk() ([]SchemaThirdCountryTransfersInner, bool) {
	if o == nil || o.ThirdCountryTransfers == nil {
		return nil, false
	}
	return o.ThirdCountryTransfers, true
}

// HasThirdCountryTransfers returns a boolean if a field has been set.
func (o *Schema) HasThirdCountryTransfers() bool {
	if o != nil && o.ThirdCountryTransfers != nil {
		return true
	}

	return false
}

// SetThirdCountryTransfers gets a reference to the given []SchemaThirdCountryTransfersInner and assigns it to the ThirdCountryTransfers field.
func (o *Schema) SetThirdCountryTransfers(v []SchemaThirdCountryTransfersInner) {
	o.ThirdCountryTransfers = v
}

// GetAccessAndDataPortability returns the AccessAndDataPortability field value if set, zero value otherwise.
func (o *Schema) GetAccessAndDataPortability() SchemaAccessAndDataPortability {
	if o == nil || o.AccessAndDataPortability == nil {
		var ret SchemaAccessAndDataPortability
		return ret
	}
	return *o.AccessAndDataPortability
}

// GetAccessAndDataPortabilityOk returns a tuple with the AccessAndDataPortability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetAccessAndDataPortabilityOk() (*SchemaAccessAndDataPortability, bool) {
	if o == nil || o.AccessAndDataPortability == nil {
		return nil, false
	}
	return o.AccessAndDataPortability, true
}

// HasAccessAndDataPortability returns a boolean if a field has been set.
func (o *Schema) HasAccessAndDataPortability() bool {
	if o != nil && o.AccessAndDataPortability != nil {
		return true
	}

	return false
}

// SetAccessAndDataPortability gets a reference to the given SchemaAccessAndDataPortability and assigns it to the AccessAndDataPortability field.
func (o *Schema) SetAccessAndDataPortability(v SchemaAccessAndDataPortability) {
	o.AccessAndDataPortability = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *Schema) GetSources() []SchemaSourcesInner {
	if o == nil || o.Sources == nil {
		var ret []SchemaSourcesInner
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetSourcesOk() ([]SchemaSourcesInner, bool) {
	if o == nil || o.Sources == nil {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *Schema) HasSources() bool {
	if o != nil && o.Sources != nil {
		return true
	}

	return false
}

// SetSources gets a reference to the given []SchemaSourcesInner and assigns it to the Sources field.
func (o *Schema) SetSources(v []SchemaSourcesInner) {
	o.Sources = v
}

// GetRightToInformation returns the RightToInformation field value if set, zero value otherwise.
func (o *Schema) GetRightToInformation() SchemaRightToInformation {
	if o == nil || o.RightToInformation == nil {
		var ret SchemaRightToInformation
		return ret
	}
	return *o.RightToInformation
}

// GetRightToInformationOk returns a tuple with the RightToInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetRightToInformationOk() (*SchemaRightToInformation, bool) {
	if o == nil || o.RightToInformation == nil {
		return nil, false
	}
	return o.RightToInformation, true
}

// HasRightToInformation returns a boolean if a field has been set.
func (o *Schema) HasRightToInformation() bool {
	if o != nil && o.RightToInformation != nil {
		return true
	}

	return false
}

// SetRightToInformation gets a reference to the given SchemaRightToInformation and assigns it to the RightToInformation field.
func (o *Schema) SetRightToInformation(v SchemaRightToInformation) {
	o.RightToInformation = &v
}

// GetRightToRectificationOrDeletion returns the RightToRectificationOrDeletion field value if set, zero value otherwise.
func (o *Schema) GetRightToRectificationOrDeletion() SchemaRightToInformation {
	if o == nil || o.RightToRectificationOrDeletion == nil {
		var ret SchemaRightToInformation
		return ret
	}
	return *o.RightToRectificationOrDeletion
}

// GetRightToRectificationOrDeletionOk returns a tuple with the RightToRectificationOrDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetRightToRectificationOrDeletionOk() (*SchemaRightToInformation, bool) {
	if o == nil || o.RightToRectificationOrDeletion == nil {
		return nil, false
	}
	return o.RightToRectificationOrDeletion, true
}

// HasRightToRectificationOrDeletion returns a boolean if a field has been set.
func (o *Schema) HasRightToRectificationOrDeletion() bool {
	if o != nil && o.RightToRectificationOrDeletion != nil {
		return true
	}

	return false
}

// SetRightToRectificationOrDeletion gets a reference to the given SchemaRightToInformation and assigns it to the RightToRectificationOrDeletion field.
func (o *Schema) SetRightToRectificationOrDeletion(v SchemaRightToInformation) {
	o.RightToRectificationOrDeletion = &v
}

// GetRightToDataPortability returns the RightToDataPortability field value if set, zero value otherwise.
func (o *Schema) GetRightToDataPortability() SchemaRightToInformation {
	if o == nil || o.RightToDataPortability == nil {
		var ret SchemaRightToInformation
		return ret
	}
	return *o.RightToDataPortability
}

// GetRightToDataPortabilityOk returns a tuple with the RightToDataPortability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetRightToDataPortabilityOk() (*SchemaRightToInformation, bool) {
	if o == nil || o.RightToDataPortability == nil {
		return nil, false
	}
	return o.RightToDataPortability, true
}

// HasRightToDataPortability returns a boolean if a field has been set.
func (o *Schema) HasRightToDataPortability() bool {
	if o != nil && o.RightToDataPortability != nil {
		return true
	}

	return false
}

// SetRightToDataPortability gets a reference to the given SchemaRightToInformation and assigns it to the RightToDataPortability field.
func (o *Schema) SetRightToDataPortability(v SchemaRightToInformation) {
	o.RightToDataPortability = &v
}

// GetRightToWithdrawConsent returns the RightToWithdrawConsent field value if set, zero value otherwise.
func (o *Schema) GetRightToWithdrawConsent() SchemaRightToInformation {
	if o == nil || o.RightToWithdrawConsent == nil {
		var ret SchemaRightToInformation
		return ret
	}
	return *o.RightToWithdrawConsent
}

// GetRightToWithdrawConsentOk returns a tuple with the RightToWithdrawConsent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetRightToWithdrawConsentOk() (*SchemaRightToInformation, bool) {
	if o == nil || o.RightToWithdrawConsent == nil {
		return nil, false
	}
	return o.RightToWithdrawConsent, true
}

// HasRightToWithdrawConsent returns a boolean if a field has been set.
func (o *Schema) HasRightToWithdrawConsent() bool {
	if o != nil && o.RightToWithdrawConsent != nil {
		return true
	}

	return false
}

// SetRightToWithdrawConsent gets a reference to the given SchemaRightToInformation and assigns it to the RightToWithdrawConsent field.
func (o *Schema) SetRightToWithdrawConsent(v SchemaRightToInformation) {
	o.RightToWithdrawConsent = &v
}

// GetRightToComplain returns the RightToComplain field value if set, zero value otherwise.
func (o *Schema) GetRightToComplain() SchemaRightToComplain {
	if o == nil || o.RightToComplain == nil {
		var ret SchemaRightToComplain
		return ret
	}
	return *o.RightToComplain
}

// GetRightToComplainOk returns a tuple with the RightToComplain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetRightToComplainOk() (*SchemaRightToComplain, bool) {
	if o == nil || o.RightToComplain == nil {
		return nil, false
	}
	return o.RightToComplain, true
}

// HasRightToComplain returns a boolean if a field has been set.
func (o *Schema) HasRightToComplain() bool {
	if o != nil && o.RightToComplain != nil {
		return true
	}

	return false
}

// SetRightToComplain gets a reference to the given SchemaRightToComplain and assigns it to the RightToComplain field.
func (o *Schema) SetRightToComplain(v SchemaRightToComplain) {
	o.RightToComplain = &v
}

// GetAutomatedDecisionMaking returns the AutomatedDecisionMaking field value if set, zero value otherwise.
func (o *Schema) GetAutomatedDecisionMaking() SchemaAutomatedDecisionMaking {
	if o == nil || o.AutomatedDecisionMaking == nil {
		var ret SchemaAutomatedDecisionMaking
		return ret
	}
	return *o.AutomatedDecisionMaking
}

// GetAutomatedDecisionMakingOk returns a tuple with the AutomatedDecisionMaking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetAutomatedDecisionMakingOk() (*SchemaAutomatedDecisionMaking, bool) {
	if o == nil || o.AutomatedDecisionMaking == nil {
		return nil, false
	}
	return o.AutomatedDecisionMaking, true
}

// HasAutomatedDecisionMaking returns a boolean if a field has been set.
func (o *Schema) HasAutomatedDecisionMaking() bool {
	if o != nil && o.AutomatedDecisionMaking != nil {
		return true
	}

	return false
}

// SetAutomatedDecisionMaking gets a reference to the given SchemaAutomatedDecisionMaking and assigns it to the AutomatedDecisionMaking field.
func (o *Schema) SetAutomatedDecisionMaking(v SchemaAutomatedDecisionMaking) {
	o.AutomatedDecisionMaking = &v
}

// GetChangesOfPurpose returns the ChangesOfPurpose field value if set, zero value otherwise.
func (o *Schema) GetChangesOfPurpose() []SchemaChangesOfPurposeInner {
	if o == nil || o.ChangesOfPurpose == nil {
		var ret []SchemaChangesOfPurposeInner
		return ret
	}
	return o.ChangesOfPurpose
}

// GetChangesOfPurposeOk returns a tuple with the ChangesOfPurpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetChangesOfPurposeOk() ([]SchemaChangesOfPurposeInner, bool) {
	if o == nil || o.ChangesOfPurpose == nil {
		return nil, false
	}
	return o.ChangesOfPurpose, true
}

// HasChangesOfPurpose returns a boolean if a field has been set.
func (o *Schema) HasChangesOfPurpose() bool {
	if o != nil && o.ChangesOfPurpose != nil {
		return true
	}

	return false
}

// SetChangesOfPurpose gets a reference to the given []SchemaChangesOfPurposeInner and assigns it to the ChangesOfPurpose field.
func (o *Schema) SetChangesOfPurpose(v []SchemaChangesOfPurposeInner) {
	o.ChangesOfPurpose = v
}

func (o Schema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Controller != nil {
		toSerialize["controller"] = o.Controller
	}
	if o.DataProtectionOfficer != nil {
		toSerialize["dataProtectionOfficer"] = o.DataProtectionOfficer
	}
	if o.DataDisclosed != nil {
		toSerialize["dataDisclosed"] = o.DataDisclosed
	}
	if o.ThirdCountryTransfers != nil {
		toSerialize["thirdCountryTransfers"] = o.ThirdCountryTransfers
	}
	if o.AccessAndDataPortability != nil {
		toSerialize["accessAndDataPortability"] = o.AccessAndDataPortability
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	if o.RightToInformation != nil {
		toSerialize["rightToInformation"] = o.RightToInformation
	}
	if o.RightToRectificationOrDeletion != nil {
		toSerialize["rightToRectificationOrDeletion"] = o.RightToRectificationOrDeletion
	}
	if o.RightToDataPortability != nil {
		toSerialize["rightToDataPortability"] = o.RightToDataPortability
	}
	if o.RightToWithdrawConsent != nil {
		toSerialize["rightToWithdrawConsent"] = o.RightToWithdrawConsent
	}
	if o.RightToComplain != nil {
		toSerialize["rightToComplain"] = o.RightToComplain
	}
	if o.AutomatedDecisionMaking != nil {
		toSerialize["automatedDecisionMaking"] = o.AutomatedDecisionMaking
	}
	if o.ChangesOfPurpose != nil {
		toSerialize["changesOfPurpose"] = o.ChangesOfPurpose
	}
	return json.Marshal(toSerialize)
}

type NullableSchema struct {
	value *Schema
	isSet bool
}

func (v NullableSchema) Get() *Schema {
	return v.value
}

func (v *NullableSchema) Set(val *Schema) {
	v.value = val
	v.isSet = true
}

func (v NullableSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchema(val *Schema) *NullableSchema {
	return &NullableSchema{value: val, isSet: true}
}

func (v NullableSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


