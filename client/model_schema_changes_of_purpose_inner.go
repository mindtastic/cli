/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SchemaChangesOfPurposeInner struct for SchemaChangesOfPurposeInner
type SchemaChangesOfPurposeInner struct {
	Description *string `json:"description,omitempty"`
	AffectedDataCategories []map[string]interface{} `json:"affectedDataCategories,omitempty"`
	PlannedDateOfChange *string `json:"plannedDateOfChange,omitempty"`
	UrlOfNewVersion *string `json:"urlOfNewVersion,omitempty"`
}

// NewSchemaChangesOfPurposeInner instantiates a new SchemaChangesOfPurposeInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaChangesOfPurposeInner() *SchemaChangesOfPurposeInner {
	this := SchemaChangesOfPurposeInner{}
	return &this
}

// NewSchemaChangesOfPurposeInnerWithDefaults instantiates a new SchemaChangesOfPurposeInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaChangesOfPurposeInnerWithDefaults() *SchemaChangesOfPurposeInner {
	this := SchemaChangesOfPurposeInner{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaChangesOfPurposeInner) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaChangesOfPurposeInner) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaChangesOfPurposeInner) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaChangesOfPurposeInner) SetDescription(v string) {
	o.Description = &v
}

// GetAffectedDataCategories returns the AffectedDataCategories field value if set, zero value otherwise.
func (o *SchemaChangesOfPurposeInner) GetAffectedDataCategories() []map[string]interface{} {
	if o == nil || o.AffectedDataCategories == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.AffectedDataCategories
}

// GetAffectedDataCategoriesOk returns a tuple with the AffectedDataCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaChangesOfPurposeInner) GetAffectedDataCategoriesOk() ([]map[string]interface{}, bool) {
	if o == nil || o.AffectedDataCategories == nil {
		return nil, false
	}
	return o.AffectedDataCategories, true
}

// HasAffectedDataCategories returns a boolean if a field has been set.
func (o *SchemaChangesOfPurposeInner) HasAffectedDataCategories() bool {
	if o != nil && o.AffectedDataCategories != nil {
		return true
	}

	return false
}

// SetAffectedDataCategories gets a reference to the given []map[string]interface{} and assigns it to the AffectedDataCategories field.
func (o *SchemaChangesOfPurposeInner) SetAffectedDataCategories(v []map[string]interface{}) {
	o.AffectedDataCategories = v
}

// GetPlannedDateOfChange returns the PlannedDateOfChange field value if set, zero value otherwise.
func (o *SchemaChangesOfPurposeInner) GetPlannedDateOfChange() string {
	if o == nil || o.PlannedDateOfChange == nil {
		var ret string
		return ret
	}
	return *o.PlannedDateOfChange
}

// GetPlannedDateOfChangeOk returns a tuple with the PlannedDateOfChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaChangesOfPurposeInner) GetPlannedDateOfChangeOk() (*string, bool) {
	if o == nil || o.PlannedDateOfChange == nil {
		return nil, false
	}
	return o.PlannedDateOfChange, true
}

// HasPlannedDateOfChange returns a boolean if a field has been set.
func (o *SchemaChangesOfPurposeInner) HasPlannedDateOfChange() bool {
	if o != nil && o.PlannedDateOfChange != nil {
		return true
	}

	return false
}

// SetPlannedDateOfChange gets a reference to the given string and assigns it to the PlannedDateOfChange field.
func (o *SchemaChangesOfPurposeInner) SetPlannedDateOfChange(v string) {
	o.PlannedDateOfChange = &v
}

// GetUrlOfNewVersion returns the UrlOfNewVersion field value if set, zero value otherwise.
func (o *SchemaChangesOfPurposeInner) GetUrlOfNewVersion() string {
	if o == nil || o.UrlOfNewVersion == nil {
		var ret string
		return ret
	}
	return *o.UrlOfNewVersion
}

// GetUrlOfNewVersionOk returns a tuple with the UrlOfNewVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaChangesOfPurposeInner) GetUrlOfNewVersionOk() (*string, bool) {
	if o == nil || o.UrlOfNewVersion == nil {
		return nil, false
	}
	return o.UrlOfNewVersion, true
}

// HasUrlOfNewVersion returns a boolean if a field has been set.
func (o *SchemaChangesOfPurposeInner) HasUrlOfNewVersion() bool {
	if o != nil && o.UrlOfNewVersion != nil {
		return true
	}

	return false
}

// SetUrlOfNewVersion gets a reference to the given string and assigns it to the UrlOfNewVersion field.
func (o *SchemaChangesOfPurposeInner) SetUrlOfNewVersion(v string) {
	o.UrlOfNewVersion = &v
}

func (o SchemaChangesOfPurposeInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.AffectedDataCategories != nil {
		toSerialize["affectedDataCategories"] = o.AffectedDataCategories
	}
	if o.PlannedDateOfChange != nil {
		toSerialize["plannedDateOfChange"] = o.PlannedDateOfChange
	}
	if o.UrlOfNewVersion != nil {
		toSerialize["urlOfNewVersion"] = o.UrlOfNewVersion
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaChangesOfPurposeInner struct {
	value *SchemaChangesOfPurposeInner
	isSet bool
}

func (v NullableSchemaChangesOfPurposeInner) Get() *SchemaChangesOfPurposeInner {
	return v.value
}

func (v *NullableSchemaChangesOfPurposeInner) Set(val *SchemaChangesOfPurposeInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaChangesOfPurposeInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaChangesOfPurposeInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaChangesOfPurposeInner(val *SchemaChangesOfPurposeInner) *NullableSchemaChangesOfPurposeInner {
	return &NullableSchemaChangesOfPurposeInner{value: val, isSet: true}
}

func (v NullableSchemaChangesOfPurposeInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaChangesOfPurposeInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


