/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// TextContent struct for TextContent
type TextContent struct {
	Type string `json:"type"`
	// The text that should be presented to the motivator user in markdown format.
	Text string `json:"text"`
}

// NewTextContent instantiates a new TextContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextContent(type_ string, text string) *TextContent {
	this := TextContent{}
	this.Type = type_
	this.Text = text
	return &this
}

// NewTextContentWithDefaults instantiates a new TextContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextContentWithDefaults() *TextContent {
	this := TextContent{}
	return &this
}

// GetType returns the Type field value
func (o *TextContent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TextContent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TextContent) SetType(v string) {
	o.Type = v
}

// GetText returns the Text field value
func (o *TextContent) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TextContent) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TextContent) SetText(v string) {
	o.Text = v
}

func (o TextContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableTextContent struct {
	value *TextContent
	isSet bool
}

func (v NullableTextContent) Get() *TextContent {
	return v.value
}

func (v *NullableTextContent) Set(val *TextContent) {
	v.value = val
	v.isSet = true
}

func (v NullableTextContent) IsSet() bool {
	return v.isSet
}

func (v *NullableTextContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextContent(val *TextContent) *NullableTextContent {
	return &NullableTextContent{value: val, isSet: true}
}

func (v NullableTextContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


