/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UserDataResponse struct for UserDataResponse
type UserDataResponse struct {
	Username *string `json:"username,omitempty"`
	Role *RoleEnum `json:"role,omitempty"`
	Email *string `json:"email,omitempty"`
	Settings *UserSettingsModel `json:"settings,omitempty"`
}

// NewUserDataResponse instantiates a new UserDataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDataResponse() *UserDataResponse {
	this := UserDataResponse{}
	return &this
}

// NewUserDataResponseWithDefaults instantiates a new UserDataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDataResponseWithDefaults() *UserDataResponse {
	this := UserDataResponse{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserDataResponse) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataResponse) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserDataResponse) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserDataResponse) SetUsername(v string) {
	o.Username = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *UserDataResponse) GetRole() RoleEnum {
	if o == nil || o.Role == nil {
		var ret RoleEnum
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataResponse) GetRoleOk() (*RoleEnum, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *UserDataResponse) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given RoleEnum and assigns it to the Role field.
func (o *UserDataResponse) SetRole(v RoleEnum) {
	o.Role = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserDataResponse) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataResponse) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserDataResponse) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserDataResponse) SetEmail(v string) {
	o.Email = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *UserDataResponse) GetSettings() UserSettingsModel {
	if o == nil || o.Settings == nil {
		var ret UserSettingsModel
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataResponse) GetSettingsOk() (*UserSettingsModel, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *UserDataResponse) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given UserSettingsModel and assigns it to the Settings field.
func (o *UserDataResponse) SetSettings(v UserSettingsModel) {
	o.Settings = &v
}

func (o UserDataResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	return json.Marshal(toSerialize)
}

type NullableUserDataResponse struct {
	value *UserDataResponse
	isSet bool
}

func (v NullableUserDataResponse) Get() *UserDataResponse {
	return v.value
}

func (v *NullableUserDataResponse) Set(val *UserDataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDataResponse(val *UserDataResponse) *NullableUserDataResponse {
	return &NullableUserDataResponse{value: val, isSet: true}
}

func (v NullableUserDataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


