/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SchemaDataDisclosedInnerPurposesInner struct for SchemaDataDisclosedInnerPurposesInner
type SchemaDataDisclosedInnerPurposesInner struct {
	Purpose *string `json:"purpose,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewSchemaDataDisclosedInnerPurposesInner instantiates a new SchemaDataDisclosedInnerPurposesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaDataDisclosedInnerPurposesInner() *SchemaDataDisclosedInnerPurposesInner {
	this := SchemaDataDisclosedInnerPurposesInner{}
	return &this
}

// NewSchemaDataDisclosedInnerPurposesInnerWithDefaults instantiates a new SchemaDataDisclosedInnerPurposesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaDataDisclosedInnerPurposesInnerWithDefaults() *SchemaDataDisclosedInnerPurposesInner {
	this := SchemaDataDisclosedInnerPurposesInner{}
	return &this
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInnerPurposesInner) GetPurpose() string {
	if o == nil || o.Purpose == nil {
		var ret string
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInnerPurposesInner) GetPurposeOk() (*string, bool) {
	if o == nil || o.Purpose == nil {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInnerPurposesInner) HasPurpose() bool {
	if o != nil && o.Purpose != nil {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given string and assigns it to the Purpose field.
func (o *SchemaDataDisclosedInnerPurposesInner) SetPurpose(v string) {
	o.Purpose = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInnerPurposesInner) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInnerPurposesInner) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInnerPurposesInner) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaDataDisclosedInnerPurposesInner) SetDescription(v string) {
	o.Description = &v
}

func (o SchemaDataDisclosedInnerPurposesInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Purpose != nil {
		toSerialize["purpose"] = o.Purpose
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaDataDisclosedInnerPurposesInner struct {
	value *SchemaDataDisclosedInnerPurposesInner
	isSet bool
}

func (v NullableSchemaDataDisclosedInnerPurposesInner) Get() *SchemaDataDisclosedInnerPurposesInner {
	return v.value
}

func (v *NullableSchemaDataDisclosedInnerPurposesInner) Set(val *SchemaDataDisclosedInnerPurposesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaDataDisclosedInnerPurposesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaDataDisclosedInnerPurposesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaDataDisclosedInnerPurposesInner(val *SchemaDataDisclosedInnerPurposesInner) *NullableSchemaDataDisclosedInnerPurposesInner {
	return &NullableSchemaDataDisclosedInnerPurposesInner{value: val, isSet: true}
}

func (v NullableSchemaDataDisclosedInnerPurposesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaDataDisclosedInnerPurposesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


