/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CreateEntryRequestBody struct for CreateEntryRequestBody
type CreateEntryRequestBody struct {
	Title *string `json:"title,omitempty"`
	Content *string `json:"content,omitempty"`
}

// NewCreateEntryRequestBody instantiates a new CreateEntryRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEntryRequestBody() *CreateEntryRequestBody {
	this := CreateEntryRequestBody{}
	return &this
}

// NewCreateEntryRequestBodyWithDefaults instantiates a new CreateEntryRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEntryRequestBodyWithDefaults() *CreateEntryRequestBody {
	this := CreateEntryRequestBody{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CreateEntryRequestBody) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEntryRequestBody) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CreateEntryRequestBody) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CreateEntryRequestBody) SetTitle(v string) {
	o.Title = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *CreateEntryRequestBody) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEntryRequestBody) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *CreateEntryRequestBody) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *CreateEntryRequestBody) SetContent(v string) {
	o.Content = &v
}

func (o CreateEntryRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableCreateEntryRequestBody struct {
	value *CreateEntryRequestBody
	isSet bool
}

func (v NullableCreateEntryRequestBody) Get() *CreateEntryRequestBody {
	return v.value
}

func (v *NullableCreateEntryRequestBody) Set(val *CreateEntryRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEntryRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEntryRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEntryRequestBody(val *CreateEntryRequestBody) *NullableCreateEntryRequestBody {
	return &NullableCreateEntryRequestBody{value: val, isSet: true}
}

func (v NullableCreateEntryRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEntryRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


