/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SchemaThirdCountryTransfersInner struct for SchemaThirdCountryTransfersInner
type SchemaThirdCountryTransfersInner struct {
	Country *string `json:"country,omitempty"`
	AdequacyDecision *SchemaThirdCountryTransfersInnerAdequacyDecision `json:"adequacyDecision,omitempty"`
	AppropriateGuarantees *SchemaThirdCountryTransfersInnerAdequacyDecision `json:"appropriateGuarantees,omitempty"`
	PresenceOfEnforceableRightsAndEffectiveRemedies *SchemaThirdCountryTransfersInnerAdequacyDecision `json:"presenceOfEnforceableRightsAndEffectiveRemedies,omitempty"`
	StandardDataProtectionClause *SchemaThirdCountryTransfersInnerAdequacyDecision `json:"standardDataProtectionClause,omitempty"`
}

// NewSchemaThirdCountryTransfersInner instantiates a new SchemaThirdCountryTransfersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaThirdCountryTransfersInner() *SchemaThirdCountryTransfersInner {
	this := SchemaThirdCountryTransfersInner{}
	return &this
}

// NewSchemaThirdCountryTransfersInnerWithDefaults instantiates a new SchemaThirdCountryTransfersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaThirdCountryTransfersInnerWithDefaults() *SchemaThirdCountryTransfersInner {
	this := SchemaThirdCountryTransfersInner{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *SchemaThirdCountryTransfersInner) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaThirdCountryTransfersInner) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *SchemaThirdCountryTransfersInner) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *SchemaThirdCountryTransfersInner) SetCountry(v string) {
	o.Country = &v
}

// GetAdequacyDecision returns the AdequacyDecision field value if set, zero value otherwise.
func (o *SchemaThirdCountryTransfersInner) GetAdequacyDecision() SchemaThirdCountryTransfersInnerAdequacyDecision {
	if o == nil || o.AdequacyDecision == nil {
		var ret SchemaThirdCountryTransfersInnerAdequacyDecision
		return ret
	}
	return *o.AdequacyDecision
}

// GetAdequacyDecisionOk returns a tuple with the AdequacyDecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaThirdCountryTransfersInner) GetAdequacyDecisionOk() (*SchemaThirdCountryTransfersInnerAdequacyDecision, bool) {
	if o == nil || o.AdequacyDecision == nil {
		return nil, false
	}
	return o.AdequacyDecision, true
}

// HasAdequacyDecision returns a boolean if a field has been set.
func (o *SchemaThirdCountryTransfersInner) HasAdequacyDecision() bool {
	if o != nil && o.AdequacyDecision != nil {
		return true
	}

	return false
}

// SetAdequacyDecision gets a reference to the given SchemaThirdCountryTransfersInnerAdequacyDecision and assigns it to the AdequacyDecision field.
func (o *SchemaThirdCountryTransfersInner) SetAdequacyDecision(v SchemaThirdCountryTransfersInnerAdequacyDecision) {
	o.AdequacyDecision = &v
}

// GetAppropriateGuarantees returns the AppropriateGuarantees field value if set, zero value otherwise.
func (o *SchemaThirdCountryTransfersInner) GetAppropriateGuarantees() SchemaThirdCountryTransfersInnerAdequacyDecision {
	if o == nil || o.AppropriateGuarantees == nil {
		var ret SchemaThirdCountryTransfersInnerAdequacyDecision
		return ret
	}
	return *o.AppropriateGuarantees
}

// GetAppropriateGuaranteesOk returns a tuple with the AppropriateGuarantees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaThirdCountryTransfersInner) GetAppropriateGuaranteesOk() (*SchemaThirdCountryTransfersInnerAdequacyDecision, bool) {
	if o == nil || o.AppropriateGuarantees == nil {
		return nil, false
	}
	return o.AppropriateGuarantees, true
}

// HasAppropriateGuarantees returns a boolean if a field has been set.
func (o *SchemaThirdCountryTransfersInner) HasAppropriateGuarantees() bool {
	if o != nil && o.AppropriateGuarantees != nil {
		return true
	}

	return false
}

// SetAppropriateGuarantees gets a reference to the given SchemaThirdCountryTransfersInnerAdequacyDecision and assigns it to the AppropriateGuarantees field.
func (o *SchemaThirdCountryTransfersInner) SetAppropriateGuarantees(v SchemaThirdCountryTransfersInnerAdequacyDecision) {
	o.AppropriateGuarantees = &v
}

// GetPresenceOfEnforceableRightsAndEffectiveRemedies returns the PresenceOfEnforceableRightsAndEffectiveRemedies field value if set, zero value otherwise.
func (o *SchemaThirdCountryTransfersInner) GetPresenceOfEnforceableRightsAndEffectiveRemedies() SchemaThirdCountryTransfersInnerAdequacyDecision {
	if o == nil || o.PresenceOfEnforceableRightsAndEffectiveRemedies == nil {
		var ret SchemaThirdCountryTransfersInnerAdequacyDecision
		return ret
	}
	return *o.PresenceOfEnforceableRightsAndEffectiveRemedies
}

// GetPresenceOfEnforceableRightsAndEffectiveRemediesOk returns a tuple with the PresenceOfEnforceableRightsAndEffectiveRemedies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaThirdCountryTransfersInner) GetPresenceOfEnforceableRightsAndEffectiveRemediesOk() (*SchemaThirdCountryTransfersInnerAdequacyDecision, bool) {
	if o == nil || o.PresenceOfEnforceableRightsAndEffectiveRemedies == nil {
		return nil, false
	}
	return o.PresenceOfEnforceableRightsAndEffectiveRemedies, true
}

// HasPresenceOfEnforceableRightsAndEffectiveRemedies returns a boolean if a field has been set.
func (o *SchemaThirdCountryTransfersInner) HasPresenceOfEnforceableRightsAndEffectiveRemedies() bool {
	if o != nil && o.PresenceOfEnforceableRightsAndEffectiveRemedies != nil {
		return true
	}

	return false
}

// SetPresenceOfEnforceableRightsAndEffectiveRemedies gets a reference to the given SchemaThirdCountryTransfersInnerAdequacyDecision and assigns it to the PresenceOfEnforceableRightsAndEffectiveRemedies field.
func (o *SchemaThirdCountryTransfersInner) SetPresenceOfEnforceableRightsAndEffectiveRemedies(v SchemaThirdCountryTransfersInnerAdequacyDecision) {
	o.PresenceOfEnforceableRightsAndEffectiveRemedies = &v
}

// GetStandardDataProtectionClause returns the StandardDataProtectionClause field value if set, zero value otherwise.
func (o *SchemaThirdCountryTransfersInner) GetStandardDataProtectionClause() SchemaThirdCountryTransfersInnerAdequacyDecision {
	if o == nil || o.StandardDataProtectionClause == nil {
		var ret SchemaThirdCountryTransfersInnerAdequacyDecision
		return ret
	}
	return *o.StandardDataProtectionClause
}

// GetStandardDataProtectionClauseOk returns a tuple with the StandardDataProtectionClause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaThirdCountryTransfersInner) GetStandardDataProtectionClauseOk() (*SchemaThirdCountryTransfersInnerAdequacyDecision, bool) {
	if o == nil || o.StandardDataProtectionClause == nil {
		return nil, false
	}
	return o.StandardDataProtectionClause, true
}

// HasStandardDataProtectionClause returns a boolean if a field has been set.
func (o *SchemaThirdCountryTransfersInner) HasStandardDataProtectionClause() bool {
	if o != nil && o.StandardDataProtectionClause != nil {
		return true
	}

	return false
}

// SetStandardDataProtectionClause gets a reference to the given SchemaThirdCountryTransfersInnerAdequacyDecision and assigns it to the StandardDataProtectionClause field.
func (o *SchemaThirdCountryTransfersInner) SetStandardDataProtectionClause(v SchemaThirdCountryTransfersInnerAdequacyDecision) {
	o.StandardDataProtectionClause = &v
}

func (o SchemaThirdCountryTransfersInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.AdequacyDecision != nil {
		toSerialize["adequacyDecision"] = o.AdequacyDecision
	}
	if o.AppropriateGuarantees != nil {
		toSerialize["appropriateGuarantees"] = o.AppropriateGuarantees
	}
	if o.PresenceOfEnforceableRightsAndEffectiveRemedies != nil {
		toSerialize["presenceOfEnforceableRightsAndEffectiveRemedies"] = o.PresenceOfEnforceableRightsAndEffectiveRemedies
	}
	if o.StandardDataProtectionClause != nil {
		toSerialize["standardDataProtectionClause"] = o.StandardDataProtectionClause
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaThirdCountryTransfersInner struct {
	value *SchemaThirdCountryTransfersInner
	isSet bool
}

func (v NullableSchemaThirdCountryTransfersInner) Get() *SchemaThirdCountryTransfersInner {
	return v.value
}

func (v *NullableSchemaThirdCountryTransfersInner) Set(val *SchemaThirdCountryTransfersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaThirdCountryTransfersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaThirdCountryTransfersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaThirdCountryTransfersInner(val *SchemaThirdCountryTransfersInner) *NullableSchemaThirdCountryTransfersInner {
	return &NullableSchemaThirdCountryTransfersInner{value: val, isSet: true}
}

func (v NullableSchemaThirdCountryTransfersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaThirdCountryTransfersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


