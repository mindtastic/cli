/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// MotivatorContent - struct for MotivatorContent
type MotivatorContent struct {
	ImageContent *ImageContent
	InputContent *InputContent
	PageBreakContent *PageBreakContent
	TextContent *TextContent
	VideoContent *VideoContent
}

// ImageContentAsMotivatorContent is a convenience function that returns ImageContent wrapped in MotivatorContent
func ImageContentAsMotivatorContent(v *ImageContent) MotivatorContent {
	return MotivatorContent{
		ImageContent: v,
	}
}

// InputContentAsMotivatorContent is a convenience function that returns InputContent wrapped in MotivatorContent
func InputContentAsMotivatorContent(v *InputContent) MotivatorContent {
	return MotivatorContent{
		InputContent: v,
	}
}

// PageBreakContentAsMotivatorContent is a convenience function that returns PageBreakContent wrapped in MotivatorContent
func PageBreakContentAsMotivatorContent(v *PageBreakContent) MotivatorContent {
	return MotivatorContent{
		PageBreakContent: v,
	}
}

// TextContentAsMotivatorContent is a convenience function that returns TextContent wrapped in MotivatorContent
func TextContentAsMotivatorContent(v *TextContent) MotivatorContent {
	return MotivatorContent{
		TextContent: v,
	}
}

// VideoContentAsMotivatorContent is a convenience function that returns VideoContent wrapped in MotivatorContent
func VideoContentAsMotivatorContent(v *VideoContent) MotivatorContent {
	return MotivatorContent{
		VideoContent: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MotivatorContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ImageContent
	err = newStrictDecoder(data).Decode(&dst.ImageContent)
	if err == nil {
		jsonImageContent, _ := json.Marshal(dst.ImageContent)
		if string(jsonImageContent) == "{}" { // empty struct
			dst.ImageContent = nil
		} else {
			match++
		}
	} else {
		dst.ImageContent = nil
	}

	// try to unmarshal data into InputContent
	err = newStrictDecoder(data).Decode(&dst.InputContent)
	if err == nil {
		jsonInputContent, _ := json.Marshal(dst.InputContent)
		if string(jsonInputContent) == "{}" { // empty struct
			dst.InputContent = nil
		} else {
			match++
		}
	} else {
		dst.InputContent = nil
	}

	// try to unmarshal data into PageBreakContent
	err = newStrictDecoder(data).Decode(&dst.PageBreakContent)
	if err == nil {
		jsonPageBreakContent, _ := json.Marshal(dst.PageBreakContent)
		if string(jsonPageBreakContent) == "{}" { // empty struct
			dst.PageBreakContent = nil
		} else {
			match++
		}
	} else {
		dst.PageBreakContent = nil
	}

	// try to unmarshal data into TextContent
	err = newStrictDecoder(data).Decode(&dst.TextContent)
	if err == nil {
		jsonTextContent, _ := json.Marshal(dst.TextContent)
		if string(jsonTextContent) == "{}" { // empty struct
			dst.TextContent = nil
		} else {
			match++
		}
	} else {
		dst.TextContent = nil
	}

	// try to unmarshal data into VideoContent
	err = newStrictDecoder(data).Decode(&dst.VideoContent)
	if err == nil {
		jsonVideoContent, _ := json.Marshal(dst.VideoContent)
		if string(jsonVideoContent) == "{}" { // empty struct
			dst.VideoContent = nil
		} else {
			match++
		}
	} else {
		dst.VideoContent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ImageContent = nil
		dst.InputContent = nil
		dst.PageBreakContent = nil
		dst.TextContent = nil
		dst.VideoContent = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(MotivatorContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(MotivatorContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MotivatorContent) MarshalJSON() ([]byte, error) {
	if src.ImageContent != nil {
		return json.Marshal(&src.ImageContent)
	}

	if src.InputContent != nil {
		return json.Marshal(&src.InputContent)
	}

	if src.PageBreakContent != nil {
		return json.Marshal(&src.PageBreakContent)
	}

	if src.TextContent != nil {
		return json.Marshal(&src.TextContent)
	}

	if src.VideoContent != nil {
		return json.Marshal(&src.VideoContent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MotivatorContent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ImageContent != nil {
		return obj.ImageContent
	}

	if obj.InputContent != nil {
		return obj.InputContent
	}

	if obj.PageBreakContent != nil {
		return obj.PageBreakContent
	}

	if obj.TextContent != nil {
		return obj.TextContent
	}

	if obj.VideoContent != nil {
		return obj.VideoContent
	}

	// all schemas are nil
	return nil
}

type NullableMotivatorContent struct {
	value *MotivatorContent
	isSet bool
}

func (v NullableMotivatorContent) Get() *MotivatorContent {
	return v.value
}

func (v *NullableMotivatorContent) Set(val *MotivatorContent) {
	v.value = val
	v.isSet = true
}

func (v NullableMotivatorContent) IsSet() bool {
	return v.isSet
}

func (v *NullableMotivatorContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMotivatorContent(val *MotivatorContent) *NullableMotivatorContent {
	return &NullableMotivatorContent{value: val, isSet: true}
}

func (v NullableMotivatorContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMotivatorContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


