/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SchemaDataDisclosedInnerLegalBasesInner struct for SchemaDataDisclosedInnerLegalBasesInner
type SchemaDataDisclosedInnerLegalBasesInner struct {
	Reference *string `json:"reference,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewSchemaDataDisclosedInnerLegalBasesInner instantiates a new SchemaDataDisclosedInnerLegalBasesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaDataDisclosedInnerLegalBasesInner() *SchemaDataDisclosedInnerLegalBasesInner {
	this := SchemaDataDisclosedInnerLegalBasesInner{}
	return &this
}

// NewSchemaDataDisclosedInnerLegalBasesInnerWithDefaults instantiates a new SchemaDataDisclosedInnerLegalBasesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaDataDisclosedInnerLegalBasesInnerWithDefaults() *SchemaDataDisclosedInnerLegalBasesInner {
	this := SchemaDataDisclosedInnerLegalBasesInner{}
	return &this
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInnerLegalBasesInner) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInnerLegalBasesInner) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInnerLegalBasesInner) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *SchemaDataDisclosedInnerLegalBasesInner) SetReference(v string) {
	o.Reference = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInnerLegalBasesInner) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInnerLegalBasesInner) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInnerLegalBasesInner) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaDataDisclosedInnerLegalBasesInner) SetDescription(v string) {
	o.Description = &v
}

func (o SchemaDataDisclosedInnerLegalBasesInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaDataDisclosedInnerLegalBasesInner struct {
	value *SchemaDataDisclosedInnerLegalBasesInner
	isSet bool
}

func (v NullableSchemaDataDisclosedInnerLegalBasesInner) Get() *SchemaDataDisclosedInnerLegalBasesInner {
	return v.value
}

func (v *NullableSchemaDataDisclosedInnerLegalBasesInner) Set(val *SchemaDataDisclosedInnerLegalBasesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaDataDisclosedInnerLegalBasesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaDataDisclosedInnerLegalBasesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaDataDisclosedInnerLegalBasesInner(val *SchemaDataDisclosedInnerLegalBasesInner) *NullableSchemaDataDisclosedInnerLegalBasesInner {
	return &NullableSchemaDataDisclosedInnerLegalBasesInner{value: val, isSet: true}
}

func (v NullableSchemaDataDisclosedInnerLegalBasesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaDataDisclosedInnerLegalBasesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


