/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MotivatorFeedback struct for MotivatorFeedback
type MotivatorFeedback struct {
	Rating string `json:"rating"`
}

// NewMotivatorFeedback instantiates a new MotivatorFeedback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMotivatorFeedback(rating string) *MotivatorFeedback {
	this := MotivatorFeedback{}
	this.Rating = rating
	return &this
}

// NewMotivatorFeedbackWithDefaults instantiates a new MotivatorFeedback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMotivatorFeedbackWithDefaults() *MotivatorFeedback {
	this := MotivatorFeedback{}
	return &this
}

// GetRating returns the Rating field value
func (o *MotivatorFeedback) GetRating() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value
// and a boolean to check if the value has been set.
func (o *MotivatorFeedback) GetRatingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rating, true
}

// SetRating sets field value
func (o *MotivatorFeedback) SetRating(v string) {
	o.Rating = v
}

func (o MotivatorFeedback) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["rating"] = o.Rating
	}
	return json.Marshal(toSerialize)
}

type NullableMotivatorFeedback struct {
	value *MotivatorFeedback
	isSet bool
}

func (v NullableMotivatorFeedback) Get() *MotivatorFeedback {
	return v.value
}

func (v *NullableMotivatorFeedback) Set(val *MotivatorFeedback) {
	v.value = val
	v.isSet = true
}

func (v NullableMotivatorFeedback) IsSet() bool {
	return v.isSet
}

func (v *NullableMotivatorFeedback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMotivatorFeedback(val *MotivatorFeedback) *NullableMotivatorFeedback {
	return &NullableMotivatorFeedback{value: val, isSet: true}
}

func (v NullableMotivatorFeedback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMotivatorFeedback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


