/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MotivatorTextInputElement A free text input.  Tells the frontend to display an free text input field (like `<input type=\"text\">` in HTML).
type MotivatorTextInputElement struct {
	InputType string `json:"inputType"`
	// A string the input field shall be captioned with.
	Label string `json:"label"`
	// Optional value for the maximum allowed length for the text input
	MaxLength *int32 `json:"maxLength,omitempty"`
}

// NewMotivatorTextInputElement instantiates a new MotivatorTextInputElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMotivatorTextInputElement(inputType string, label string) *MotivatorTextInputElement {
	this := MotivatorTextInputElement{}
	this.InputType = inputType
	this.Label = label
	return &this
}

// NewMotivatorTextInputElementWithDefaults instantiates a new MotivatorTextInputElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMotivatorTextInputElementWithDefaults() *MotivatorTextInputElement {
	this := MotivatorTextInputElement{}
	return &this
}

// GetInputType returns the InputType field value
func (o *MotivatorTextInputElement) GetInputType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InputType
}

// GetInputTypeOk returns a tuple with the InputType field value
// and a boolean to check if the value has been set.
func (o *MotivatorTextInputElement) GetInputTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InputType, true
}

// SetInputType sets field value
func (o *MotivatorTextInputElement) SetInputType(v string) {
	o.InputType = v
}

// GetLabel returns the Label field value
func (o *MotivatorTextInputElement) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *MotivatorTextInputElement) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *MotivatorTextInputElement) SetLabel(v string) {
	o.Label = v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *MotivatorTextInputElement) GetMaxLength() int32 {
	if o == nil || o.MaxLength == nil {
		var ret int32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MotivatorTextInputElement) GetMaxLengthOk() (*int32, bool) {
	if o == nil || o.MaxLength == nil {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *MotivatorTextInputElement) HasMaxLength() bool {
	if o != nil && o.MaxLength != nil {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int32 and assigns it to the MaxLength field.
func (o *MotivatorTextInputElement) SetMaxLength(v int32) {
	o.MaxLength = &v
}

func (o MotivatorTextInputElement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["inputType"] = o.InputType
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if o.MaxLength != nil {
		toSerialize["maxLength"] = o.MaxLength
	}
	return json.Marshal(toSerialize)
}

type NullableMotivatorTextInputElement struct {
	value *MotivatorTextInputElement
	isSet bool
}

func (v NullableMotivatorTextInputElement) Get() *MotivatorTextInputElement {
	return v.value
}

func (v *NullableMotivatorTextInputElement) Set(val *MotivatorTextInputElement) {
	v.value = val
	v.isSet = true
}

func (v NullableMotivatorTextInputElement) IsSet() bool {
	return v.isSet
}

func (v *NullableMotivatorTextInputElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMotivatorTextInputElement(val *MotivatorTextInputElement) *NullableMotivatorTextInputElement {
	return &NullableMotivatorTextInputElement{value: val, isSet: true}
}

func (v NullableMotivatorTextInputElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMotivatorTextInputElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


