/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// Mood struct for Mood
type Mood struct {
	Id int32 `json:"id"`
	// The date of the day the mood entry should created for. It expects an [`ISO 8601` / `RFC 3399` timestamp](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6). Sending only the date part without any `time` component is also allowed, but not recommended, as this could change in future versions of the API.
	MoodDay time.Time `json:"mood_day"`
	MoodType string `json:"mood_type"`
	MoodDescr *string `json:"mood_descr,omitempty"`
}

// NewMood instantiates a new Mood object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMood(id int32, moodDay time.Time, moodType string) *Mood {
	this := Mood{}
	this.Id = id
	this.MoodDay = moodDay
	this.MoodType = moodType
	return &this
}

// NewMoodWithDefaults instantiates a new Mood object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoodWithDefaults() *Mood {
	this := Mood{}
	return &this
}

// GetId returns the Id field value
func (o *Mood) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Mood) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Mood) SetId(v int32) {
	o.Id = v
}

// GetMoodDay returns the MoodDay field value
func (o *Mood) GetMoodDay() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.MoodDay
}

// GetMoodDayOk returns a tuple with the MoodDay field value
// and a boolean to check if the value has been set.
func (o *Mood) GetMoodDayOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MoodDay, true
}

// SetMoodDay sets field value
func (o *Mood) SetMoodDay(v time.Time) {
	o.MoodDay = v
}

// GetMoodType returns the MoodType field value
func (o *Mood) GetMoodType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MoodType
}

// GetMoodTypeOk returns a tuple with the MoodType field value
// and a boolean to check if the value has been set.
func (o *Mood) GetMoodTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MoodType, true
}

// SetMoodType sets field value
func (o *Mood) SetMoodType(v string) {
	o.MoodType = v
}

// GetMoodDescr returns the MoodDescr field value if set, zero value otherwise.
func (o *Mood) GetMoodDescr() string {
	if o == nil || o.MoodDescr == nil {
		var ret string
		return ret
	}
	return *o.MoodDescr
}

// GetMoodDescrOk returns a tuple with the MoodDescr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mood) GetMoodDescrOk() (*string, bool) {
	if o == nil || o.MoodDescr == nil {
		return nil, false
	}
	return o.MoodDescr, true
}

// HasMoodDescr returns a boolean if a field has been set.
func (o *Mood) HasMoodDescr() bool {
	if o != nil && o.MoodDescr != nil {
		return true
	}

	return false
}

// SetMoodDescr gets a reference to the given string and assigns it to the MoodDescr field.
func (o *Mood) SetMoodDescr(v string) {
	o.MoodDescr = &v
}

func (o Mood) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["mood_day"] = o.MoodDay
	}
	if true {
		toSerialize["mood_type"] = o.MoodType
	}
	if o.MoodDescr != nil {
		toSerialize["mood_descr"] = o.MoodDescr
	}
	return json.Marshal(toSerialize)
}

type NullableMood struct {
	value *Mood
	isSet bool
}

func (v NullableMood) Get() *Mood {
	return v.value
}

func (v *NullableMood) Set(val *Mood) {
	v.value = val
	v.isSet = true
}

func (v NullableMood) IsSet() bool {
	return v.isSet
}

func (v *NullableMood) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMood(val *Mood) *NullableMood {
	return &NullableMood{value: val, isSet: true}
}

func (v NullableMood) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMood) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


