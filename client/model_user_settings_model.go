/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UserSettingsModel Stores the users settings
type UserSettingsModel struct {
	Language *string `json:"language,omitempty"`
}

// NewUserSettingsModel instantiates a new UserSettingsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettingsModel() *UserSettingsModel {
	this := UserSettingsModel{}
	return &this
}

// NewUserSettingsModelWithDefaults instantiates a new UserSettingsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsModelWithDefaults() *UserSettingsModel {
	this := UserSettingsModel{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *UserSettingsModel) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettingsModel) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *UserSettingsModel) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *UserSettingsModel) SetLanguage(v string) {
	o.Language = &v
}

func (o UserSettingsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	return json.Marshal(toSerialize)
}

type NullableUserSettingsModel struct {
	value *UserSettingsModel
	isSet bool
}

func (v NullableUserSettingsModel) Get() *UserSettingsModel {
	return v.value
}

func (v *NullableUserSettingsModel) Set(val *UserSettingsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettingsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettingsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettingsModel(val *UserSettingsModel) *NullableUserSettingsModel {
	return &NullableUserSettingsModel{value: val, isSet: true}
}

func (v NullableUserSettingsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettingsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


