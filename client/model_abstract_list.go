/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AbstractList struct for AbstractList
type AbstractList struct {
	EntryCount int32 `json:"entry_count"`
}

// NewAbstractList instantiates a new AbstractList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractList(entryCount int32) *AbstractList {
	this := AbstractList{}
	this.EntryCount = entryCount
	return &this
}

// NewAbstractListWithDefaults instantiates a new AbstractList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractListWithDefaults() *AbstractList {
	this := AbstractList{}
	return &this
}

// GetEntryCount returns the EntryCount field value
func (o *AbstractList) GetEntryCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EntryCount
}

// GetEntryCountOk returns a tuple with the EntryCount field value
// and a boolean to check if the value has been set.
func (o *AbstractList) GetEntryCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntryCount, true
}

// SetEntryCount sets field value
func (o *AbstractList) SetEntryCount(v int32) {
	o.EntryCount = v
}

func (o AbstractList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entry_count"] = o.EntryCount
	}
	return json.Marshal(toSerialize)
}

type NullableAbstractList struct {
	value *AbstractList
	isSet bool
}

func (v NullableAbstractList) Get() *AbstractList {
	return v.value
}

func (v *NullableAbstractList) Set(val *AbstractList) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractList) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractList(val *AbstractList) *NullableAbstractList {
	return &NullableAbstractList{value: val, isSet: true}
}

func (v NullableAbstractList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


