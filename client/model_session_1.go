/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// Session1 A session object
type Session1 struct {
	Id string `json:"id"`
	// Active state. If false the session is no longer active.
	Active *bool `json:"active,omitempty"`
	// The Session Expiry When this session expires at.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// The Session Authentication Timestamp When this session was authenticated at. If multi-factor authentication was used this is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).
	AuthenticatedAt *time.Time `json:"authenticated_at,omitempty"`
	// internal value
	AuthenticatorAssuranceLevel *string `json:"authenticator_assurance_level,omitempty"`
	AuthenticationMethods []SessionAuthenticationMethod `json:"authentication_methods,omitempty"`
	// The Session Issuance Timestamp When this session was issued at. Usually equal or close to `authenticated_at`.
	IssuedAt *time.Time `json:"issued_at,omitempty"`
	Identity Identity `json:"identity"`
}

// NewSession1 instantiates a new Session1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSession1(id string, identity Identity) *Session1 {
	this := Session1{}
	this.Id = id
	this.Identity = identity
	return &this
}

// NewSession1WithDefaults instantiates a new Session1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSession1WithDefaults() *Session1 {
	this := Session1{}
	return &this
}

// GetId returns the Id field value
func (o *Session1) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Session1) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Session1) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Session1) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session1) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Session1) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Session1) SetActive(v bool) {
	o.Active = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *Session1) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session1) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *Session1) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *Session1) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetAuthenticatedAt returns the AuthenticatedAt field value if set, zero value otherwise.
func (o *Session1) GetAuthenticatedAt() time.Time {
	if o == nil || o.AuthenticatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.AuthenticatedAt
}

// GetAuthenticatedAtOk returns a tuple with the AuthenticatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session1) GetAuthenticatedAtOk() (*time.Time, bool) {
	if o == nil || o.AuthenticatedAt == nil {
		return nil, false
	}
	return o.AuthenticatedAt, true
}

// HasAuthenticatedAt returns a boolean if a field has been set.
func (o *Session1) HasAuthenticatedAt() bool {
	if o != nil && o.AuthenticatedAt != nil {
		return true
	}

	return false
}

// SetAuthenticatedAt gets a reference to the given time.Time and assigns it to the AuthenticatedAt field.
func (o *Session1) SetAuthenticatedAt(v time.Time) {
	o.AuthenticatedAt = &v
}

// GetAuthenticatorAssuranceLevel returns the AuthenticatorAssuranceLevel field value if set, zero value otherwise.
func (o *Session1) GetAuthenticatorAssuranceLevel() string {
	if o == nil || o.AuthenticatorAssuranceLevel == nil {
		var ret string
		return ret
	}
	return *o.AuthenticatorAssuranceLevel
}

// GetAuthenticatorAssuranceLevelOk returns a tuple with the AuthenticatorAssuranceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session1) GetAuthenticatorAssuranceLevelOk() (*string, bool) {
	if o == nil || o.AuthenticatorAssuranceLevel == nil {
		return nil, false
	}
	return o.AuthenticatorAssuranceLevel, true
}

// HasAuthenticatorAssuranceLevel returns a boolean if a field has been set.
func (o *Session1) HasAuthenticatorAssuranceLevel() bool {
	if o != nil && o.AuthenticatorAssuranceLevel != nil {
		return true
	}

	return false
}

// SetAuthenticatorAssuranceLevel gets a reference to the given string and assigns it to the AuthenticatorAssuranceLevel field.
func (o *Session1) SetAuthenticatorAssuranceLevel(v string) {
	o.AuthenticatorAssuranceLevel = &v
}

// GetAuthenticationMethods returns the AuthenticationMethods field value if set, zero value otherwise.
func (o *Session1) GetAuthenticationMethods() []SessionAuthenticationMethod {
	if o == nil || o.AuthenticationMethods == nil {
		var ret []SessionAuthenticationMethod
		return ret
	}
	return o.AuthenticationMethods
}

// GetAuthenticationMethodsOk returns a tuple with the AuthenticationMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session1) GetAuthenticationMethodsOk() ([]SessionAuthenticationMethod, bool) {
	if o == nil || o.AuthenticationMethods == nil {
		return nil, false
	}
	return o.AuthenticationMethods, true
}

// HasAuthenticationMethods returns a boolean if a field has been set.
func (o *Session1) HasAuthenticationMethods() bool {
	if o != nil && o.AuthenticationMethods != nil {
		return true
	}

	return false
}

// SetAuthenticationMethods gets a reference to the given []SessionAuthenticationMethod and assigns it to the AuthenticationMethods field.
func (o *Session1) SetAuthenticationMethods(v []SessionAuthenticationMethod) {
	o.AuthenticationMethods = v
}

// GetIssuedAt returns the IssuedAt field value if set, zero value otherwise.
func (o *Session1) GetIssuedAt() time.Time {
	if o == nil || o.IssuedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session1) GetIssuedAtOk() (*time.Time, bool) {
	if o == nil || o.IssuedAt == nil {
		return nil, false
	}
	return o.IssuedAt, true
}

// HasIssuedAt returns a boolean if a field has been set.
func (o *Session1) HasIssuedAt() bool {
	if o != nil && o.IssuedAt != nil {
		return true
	}

	return false
}

// SetIssuedAt gets a reference to the given time.Time and assigns it to the IssuedAt field.
func (o *Session1) SetIssuedAt(v time.Time) {
	o.IssuedAt = &v
}

// GetIdentity returns the Identity field value
func (o *Session1) GetIdentity() Identity {
	if o == nil {
		var ret Identity
		return ret
	}

	return o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value
// and a boolean to check if the value has been set.
func (o *Session1) GetIdentityOk() (*Identity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identity, true
}

// SetIdentity sets field value
func (o *Session1) SetIdentity(v Identity) {
	o.Identity = v
}

func (o Session1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if o.AuthenticatedAt != nil {
		toSerialize["authenticated_at"] = o.AuthenticatedAt
	}
	if o.AuthenticatorAssuranceLevel != nil {
		toSerialize["authenticator_assurance_level"] = o.AuthenticatorAssuranceLevel
	}
	if o.AuthenticationMethods != nil {
		toSerialize["authentication_methods"] = o.AuthenticationMethods
	}
	if o.IssuedAt != nil {
		toSerialize["issued_at"] = o.IssuedAt
	}
	if true {
		toSerialize["identity"] = o.Identity
	}
	return json.Marshal(toSerialize)
}

type NullableSession1 struct {
	value *Session1
	isSet bool
}

func (v NullableSession1) Get() *Session1 {
	return v.value
}

func (v *NullableSession1) Set(val *Session1) {
	v.value = val
	v.isSet = true
}

func (v NullableSession1) IsSet() bool {
	return v.isSet
}

func (v *NullableSession1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSession1(val *Session1) *NullableSession1 {
	return &NullableSession1{value: val, isSet: true}
}

func (v NullableSession1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSession1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


