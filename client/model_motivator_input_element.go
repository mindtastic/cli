/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// MotivatorInputElement - struct for MotivatorInputElement
type MotivatorInputElement struct {
	MotivatorSliderInputElement *MotivatorSliderInputElement
	MotivatorTextInputElement *MotivatorTextInputElement
}

// MotivatorSliderInputElementAsMotivatorInputElement is a convenience function that returns MotivatorSliderInputElement wrapped in MotivatorInputElement
func MotivatorSliderInputElementAsMotivatorInputElement(v *MotivatorSliderInputElement) MotivatorInputElement {
	return MotivatorInputElement{
		MotivatorSliderInputElement: v,
	}
}

// MotivatorTextInputElementAsMotivatorInputElement is a convenience function that returns MotivatorTextInputElement wrapped in MotivatorInputElement
func MotivatorTextInputElementAsMotivatorInputElement(v *MotivatorTextInputElement) MotivatorInputElement {
	return MotivatorInputElement{
		MotivatorTextInputElement: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MotivatorInputElement) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MotivatorSliderInputElement
	err = newStrictDecoder(data).Decode(&dst.MotivatorSliderInputElement)
	if err == nil {
		jsonMotivatorSliderInputElement, _ := json.Marshal(dst.MotivatorSliderInputElement)
		if string(jsonMotivatorSliderInputElement) == "{}" { // empty struct
			dst.MotivatorSliderInputElement = nil
		} else {
			match++
		}
	} else {
		dst.MotivatorSliderInputElement = nil
	}

	// try to unmarshal data into MotivatorTextInputElement
	err = newStrictDecoder(data).Decode(&dst.MotivatorTextInputElement)
	if err == nil {
		jsonMotivatorTextInputElement, _ := json.Marshal(dst.MotivatorTextInputElement)
		if string(jsonMotivatorTextInputElement) == "{}" { // empty struct
			dst.MotivatorTextInputElement = nil
		} else {
			match++
		}
	} else {
		dst.MotivatorTextInputElement = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MotivatorSliderInputElement = nil
		dst.MotivatorTextInputElement = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(MotivatorInputElement)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(MotivatorInputElement)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MotivatorInputElement) MarshalJSON() ([]byte, error) {
	if src.MotivatorSliderInputElement != nil {
		return json.Marshal(&src.MotivatorSliderInputElement)
	}

	if src.MotivatorTextInputElement != nil {
		return json.Marshal(&src.MotivatorTextInputElement)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MotivatorInputElement) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MotivatorSliderInputElement != nil {
		return obj.MotivatorSliderInputElement
	}

	if obj.MotivatorTextInputElement != nil {
		return obj.MotivatorTextInputElement
	}

	// all schemas are nil
	return nil
}

type NullableMotivatorInputElement struct {
	value *MotivatorInputElement
	isSet bool
}

func (v NullableMotivatorInputElement) Get() *MotivatorInputElement {
	return v.value
}

func (v *NullableMotivatorInputElement) Set(val *MotivatorInputElement) {
	v.value = val
	v.isSet = true
}

func (v NullableMotivatorInputElement) IsSet() bool {
	return v.isSet
}

func (v *NullableMotivatorInputElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMotivatorInputElement(val *MotivatorInputElement) *NullableMotivatorInputElement {
	return &NullableMotivatorInputElement{value: val, isSet: true}
}

func (v NullableMotivatorInputElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMotivatorInputElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


