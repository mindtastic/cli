/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SchemaRightToInformation struct for SchemaRightToInformation
type SchemaRightToInformation struct {
	Available *bool `json:"available,omitempty"`
	Description *string `json:"description,omitempty"`
	Url *string `json:"url,omitempty"`
	Email *string `json:"email,omitempty"`
	IdentificationEvidences []map[string]interface{} `json:"identificationEvidences,omitempty"`
}

// NewSchemaRightToInformation instantiates a new SchemaRightToInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaRightToInformation() *SchemaRightToInformation {
	this := SchemaRightToInformation{}
	return &this
}

// NewSchemaRightToInformationWithDefaults instantiates a new SchemaRightToInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaRightToInformationWithDefaults() *SchemaRightToInformation {
	this := SchemaRightToInformation{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *SchemaRightToInformation) GetAvailable() bool {
	if o == nil || o.Available == nil {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRightToInformation) GetAvailableOk() (*bool, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *SchemaRightToInformation) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *SchemaRightToInformation) SetAvailable(v bool) {
	o.Available = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaRightToInformation) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRightToInformation) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaRightToInformation) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaRightToInformation) SetDescription(v string) {
	o.Description = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SchemaRightToInformation) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRightToInformation) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SchemaRightToInformation) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SchemaRightToInformation) SetUrl(v string) {
	o.Url = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SchemaRightToInformation) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRightToInformation) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SchemaRightToInformation) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SchemaRightToInformation) SetEmail(v string) {
	o.Email = &v
}

// GetIdentificationEvidences returns the IdentificationEvidences field value if set, zero value otherwise.
func (o *SchemaRightToInformation) GetIdentificationEvidences() []map[string]interface{} {
	if o == nil || o.IdentificationEvidences == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.IdentificationEvidences
}

// GetIdentificationEvidencesOk returns a tuple with the IdentificationEvidences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRightToInformation) GetIdentificationEvidencesOk() ([]map[string]interface{}, bool) {
	if o == nil || o.IdentificationEvidences == nil {
		return nil, false
	}
	return o.IdentificationEvidences, true
}

// HasIdentificationEvidences returns a boolean if a field has been set.
func (o *SchemaRightToInformation) HasIdentificationEvidences() bool {
	if o != nil && o.IdentificationEvidences != nil {
		return true
	}

	return false
}

// SetIdentificationEvidences gets a reference to the given []map[string]interface{} and assigns it to the IdentificationEvidences field.
func (o *SchemaRightToInformation) SetIdentificationEvidences(v []map[string]interface{}) {
	o.IdentificationEvidences = v
}

func (o SchemaRightToInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.IdentificationEvidences != nil {
		toSerialize["identificationEvidences"] = o.IdentificationEvidences
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaRightToInformation struct {
	value *SchemaRightToInformation
	isSet bool
}

func (v NullableSchemaRightToInformation) Get() *SchemaRightToInformation {
	return v.value
}

func (v *NullableSchemaRightToInformation) Set(val *SchemaRightToInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaRightToInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaRightToInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaRightToInformation(val *SchemaRightToInformation) *NullableSchemaRightToInformation {
	return &NullableSchemaRightToInformation{value: val, isSet: true}
}

func (v NullableSchemaRightToInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaRightToInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


