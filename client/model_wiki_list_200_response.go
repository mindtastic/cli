/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// WikiList200Response - struct for WikiList200Response
type WikiList200Response struct {
	ListOfWikiEntries *ListOfWikiEntries
	ListOfWikiEntryHeaders *ListOfWikiEntryHeaders
}

// ListOfWikiEntriesAsWikiList200Response is a convenience function that returns ListOfWikiEntries wrapped in WikiList200Response
func ListOfWikiEntriesAsWikiList200Response(v *ListOfWikiEntries) WikiList200Response {
	return WikiList200Response{
		ListOfWikiEntries: v,
	}
}

// ListOfWikiEntryHeadersAsWikiList200Response is a convenience function that returns ListOfWikiEntryHeaders wrapped in WikiList200Response
func ListOfWikiEntryHeadersAsWikiList200Response(v *ListOfWikiEntryHeaders) WikiList200Response {
	return WikiList200Response{
		ListOfWikiEntryHeaders: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WikiList200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListOfWikiEntries
	err = newStrictDecoder(data).Decode(&dst.ListOfWikiEntries)
	if err == nil {
		jsonListOfWikiEntries, _ := json.Marshal(dst.ListOfWikiEntries)
		if string(jsonListOfWikiEntries) == "{}" { // empty struct
			dst.ListOfWikiEntries = nil
		} else {
			match++
		}
	} else {
		dst.ListOfWikiEntries = nil
	}

	// try to unmarshal data into ListOfWikiEntryHeaders
	err = newStrictDecoder(data).Decode(&dst.ListOfWikiEntryHeaders)
	if err == nil {
		jsonListOfWikiEntryHeaders, _ := json.Marshal(dst.ListOfWikiEntryHeaders)
		if string(jsonListOfWikiEntryHeaders) == "{}" { // empty struct
			dst.ListOfWikiEntryHeaders = nil
		} else {
			match++
		}
	} else {
		dst.ListOfWikiEntryHeaders = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListOfWikiEntries = nil
		dst.ListOfWikiEntryHeaders = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(WikiList200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(WikiList200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WikiList200Response) MarshalJSON() ([]byte, error) {
	if src.ListOfWikiEntries != nil {
		return json.Marshal(&src.ListOfWikiEntries)
	}

	if src.ListOfWikiEntryHeaders != nil {
		return json.Marshal(&src.ListOfWikiEntryHeaders)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WikiList200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ListOfWikiEntries != nil {
		return obj.ListOfWikiEntries
	}

	if obj.ListOfWikiEntryHeaders != nil {
		return obj.ListOfWikiEntryHeaders
	}

	// all schemas are nil
	return nil
}

type NullableWikiList200Response struct {
	value *WikiList200Response
	isSet bool
}

func (v NullableWikiList200Response) Get() *WikiList200Response {
	return v.value
}

func (v *NullableWikiList200Response) Set(val *WikiList200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableWikiList200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableWikiList200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWikiList200Response(val *WikiList200Response) *NullableWikiList200Response {
	return &NullableWikiList200Response{value: val, isSet: true}
}

func (v NullableWikiList200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWikiList200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


