/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ValidationError1 struct for ValidationError1
type ValidationError1 struct {
	Error string `json:"error"`
}

// NewValidationError1 instantiates a new ValidationError1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationError1(error_ string) *ValidationError1 {
	this := ValidationError1{}
	this.Error = error_
	return &this
}

// NewValidationError1WithDefaults instantiates a new ValidationError1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationError1WithDefaults() *ValidationError1 {
	this := ValidationError1{}
	return &this
}

// GetError returns the Error field value
func (o *ValidationError1) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *ValidationError1) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *ValidationError1) SetError(v string) {
	o.Error = v
}

func (o ValidationError1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableValidationError1 struct {
	value *ValidationError1
	isSet bool
}

func (v NullableValidationError1) Get() *ValidationError1 {
	return v.value
}

func (v *NullableValidationError1) Set(val *ValidationError1) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationError1) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationError1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationError1(val *ValidationError1) *NullableValidationError1 {
	return &NullableValidationError1{value: val, isSet: true}
}

func (v NullableValidationError1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationError1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


