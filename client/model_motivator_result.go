/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// MotivatorResult struct for MotivatorResult
type MotivatorResult struct {
	Timestamp time.Time `json:"timestamp"`
	Values map[string]MotivatorResultEntry `json:"values"`
	Feedback *MotivatorFeedback `json:"feedback,omitempty"`
}

// NewMotivatorResult instantiates a new MotivatorResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMotivatorResult(timestamp time.Time, values map[string]MotivatorResultEntry) *MotivatorResult {
	this := MotivatorResult{}
	this.Timestamp = timestamp
	this.Values = values
	return &this
}

// NewMotivatorResultWithDefaults instantiates a new MotivatorResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMotivatorResultWithDefaults() *MotivatorResult {
	this := MotivatorResult{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *MotivatorResult) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *MotivatorResult) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *MotivatorResult) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetValues returns the Values field value
func (o *MotivatorResult) GetValues() map[string]MotivatorResultEntry {
	if o == nil {
		var ret map[string]MotivatorResultEntry
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *MotivatorResult) GetValuesOk() (*map[string]MotivatorResultEntry, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Values, true
}

// SetValues sets field value
func (o *MotivatorResult) SetValues(v map[string]MotivatorResultEntry) {
	o.Values = v
}

// GetFeedback returns the Feedback field value if set, zero value otherwise.
func (o *MotivatorResult) GetFeedback() MotivatorFeedback {
	if o == nil || o.Feedback == nil {
		var ret MotivatorFeedback
		return ret
	}
	return *o.Feedback
}

// GetFeedbackOk returns a tuple with the Feedback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MotivatorResult) GetFeedbackOk() (*MotivatorFeedback, bool) {
	if o == nil || o.Feedback == nil {
		return nil, false
	}
	return o.Feedback, true
}

// HasFeedback returns a boolean if a field has been set.
func (o *MotivatorResult) HasFeedback() bool {
	if o != nil && o.Feedback != nil {
		return true
	}

	return false
}

// SetFeedback gets a reference to the given MotivatorFeedback and assigns it to the Feedback field.
func (o *MotivatorResult) SetFeedback(v MotivatorFeedback) {
	o.Feedback = &v
}

func (o MotivatorResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["values"] = o.Values
	}
	if o.Feedback != nil {
		toSerialize["feedback"] = o.Feedback
	}
	return json.Marshal(toSerialize)
}

type NullableMotivatorResult struct {
	value *MotivatorResult
	isSet bool
}

func (v NullableMotivatorResult) Get() *MotivatorResult {
	return v.value
}

func (v *NullableMotivatorResult) Set(val *MotivatorResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMotivatorResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMotivatorResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMotivatorResult(val *MotivatorResult) *NullableMotivatorResult {
	return &NullableMotivatorResult{value: val, isSet: true}
}

func (v NullableMotivatorResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMotivatorResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


