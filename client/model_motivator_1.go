/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Motivator1 struct for Motivator1
type Motivator1 struct {
	Content []MotivatorContent `json:"content,omitempty"`
	Inputs []MotivatorInput `json:"inputs,omitempty"`
}

// NewMotivator1 instantiates a new Motivator1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMotivator1() *Motivator1 {
	this := Motivator1{}
	return &this
}

// NewMotivator1WithDefaults instantiates a new Motivator1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMotivator1WithDefaults() *Motivator1 {
	this := Motivator1{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *Motivator1) GetContent() []MotivatorContent {
	if o == nil || o.Content == nil {
		var ret []MotivatorContent
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Motivator1) GetContentOk() ([]MotivatorContent, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *Motivator1) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given []MotivatorContent and assigns it to the Content field.
func (o *Motivator1) SetContent(v []MotivatorContent) {
	o.Content = v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *Motivator1) GetInputs() []MotivatorInput {
	if o == nil || o.Inputs == nil {
		var ret []MotivatorInput
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Motivator1) GetInputsOk() ([]MotivatorInput, bool) {
	if o == nil || o.Inputs == nil {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *Motivator1) HasInputs() bool {
	if o != nil && o.Inputs != nil {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []MotivatorInput and assigns it to the Inputs field.
func (o *Motivator1) SetInputs(v []MotivatorInput) {
	o.Inputs = v
}

func (o Motivator1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	return json.Marshal(toSerialize)
}

type NullableMotivator1 struct {
	value *Motivator1
	isSet bool
}

func (v NullableMotivator1) Get() *Motivator1 {
	return v.value
}

func (v *NullableMotivator1) Set(val *Motivator1) {
	v.value = val
	v.isSet = true
}

func (v NullableMotivator1) IsSet() bool {
	return v.isSet
}

func (v *NullableMotivator1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMotivator1(val *Motivator1) *NullableMotivator1 {
	return &NullableMotivator1{value: val, isSet: true}
}

func (v NullableMotivator1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMotivator1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


