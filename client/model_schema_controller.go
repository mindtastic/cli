/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SchemaController struct for SchemaController
type SchemaController struct {
	Name *string `json:"name,omitempty"`
	Division *string `json:"division,omitempty"`
	Address *string `json:"address,omitempty"`
	Country *string `json:"country,omitempty"`
	Representative *SchemaControllerRepresentative `json:"representative,omitempty"`
}

// NewSchemaController instantiates a new SchemaController object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaController() *SchemaController {
	this := SchemaController{}
	return &this
}

// NewSchemaControllerWithDefaults instantiates a new SchemaController object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaControllerWithDefaults() *SchemaController {
	this := SchemaController{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchemaController) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaController) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchemaController) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchemaController) SetName(v string) {
	o.Name = &v
}

// GetDivision returns the Division field value if set, zero value otherwise.
func (o *SchemaController) GetDivision() string {
	if o == nil || o.Division == nil {
		var ret string
		return ret
	}
	return *o.Division
}

// GetDivisionOk returns a tuple with the Division field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaController) GetDivisionOk() (*string, bool) {
	if o == nil || o.Division == nil {
		return nil, false
	}
	return o.Division, true
}

// HasDivision returns a boolean if a field has been set.
func (o *SchemaController) HasDivision() bool {
	if o != nil && o.Division != nil {
		return true
	}

	return false
}

// SetDivision gets a reference to the given string and assigns it to the Division field.
func (o *SchemaController) SetDivision(v string) {
	o.Division = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *SchemaController) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaController) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *SchemaController) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *SchemaController) SetAddress(v string) {
	o.Address = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *SchemaController) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaController) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *SchemaController) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *SchemaController) SetCountry(v string) {
	o.Country = &v
}

// GetRepresentative returns the Representative field value if set, zero value otherwise.
func (o *SchemaController) GetRepresentative() SchemaControllerRepresentative {
	if o == nil || o.Representative == nil {
		var ret SchemaControllerRepresentative
		return ret
	}
	return *o.Representative
}

// GetRepresentativeOk returns a tuple with the Representative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaController) GetRepresentativeOk() (*SchemaControllerRepresentative, bool) {
	if o == nil || o.Representative == nil {
		return nil, false
	}
	return o.Representative, true
}

// HasRepresentative returns a boolean if a field has been set.
func (o *SchemaController) HasRepresentative() bool {
	if o != nil && o.Representative != nil {
		return true
	}

	return false
}

// SetRepresentative gets a reference to the given SchemaControllerRepresentative and assigns it to the Representative field.
func (o *SchemaController) SetRepresentative(v SchemaControllerRepresentative) {
	o.Representative = &v
}

func (o SchemaController) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Division != nil {
		toSerialize["division"] = o.Division
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Representative != nil {
		toSerialize["representative"] = o.Representative
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaController struct {
	value *SchemaController
	isSet bool
}

func (v NullableSchemaController) Get() *SchemaController {
	return v.value
}

func (v *NullableSchemaController) Set(val *SchemaController) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaController) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaController) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaController(val *SchemaController) *NullableSchemaController {
	return &NullableSchemaController{value: val, isSet: true}
}

func (v NullableSchemaController) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaController) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


