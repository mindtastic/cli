/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SchemaSourcesInner struct for SchemaSourcesInner
type SchemaSourcesInner struct {
	Id *string `json:"_id,omitempty"`
	DataCategory *string `json:"dataCategory,omitempty"`
	Sources []SchemaSourcesInnerSourcesInner `json:"sources,omitempty"`
}

// NewSchemaSourcesInner instantiates a new SchemaSourcesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaSourcesInner() *SchemaSourcesInner {
	this := SchemaSourcesInner{}
	return &this
}

// NewSchemaSourcesInnerWithDefaults instantiates a new SchemaSourcesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaSourcesInnerWithDefaults() *SchemaSourcesInner {
	this := SchemaSourcesInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchemaSourcesInner) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaSourcesInner) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchemaSourcesInner) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchemaSourcesInner) SetId(v string) {
	o.Id = &v
}

// GetDataCategory returns the DataCategory field value if set, zero value otherwise.
func (o *SchemaSourcesInner) GetDataCategory() string {
	if o == nil || o.DataCategory == nil {
		var ret string
		return ret
	}
	return *o.DataCategory
}

// GetDataCategoryOk returns a tuple with the DataCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaSourcesInner) GetDataCategoryOk() (*string, bool) {
	if o == nil || o.DataCategory == nil {
		return nil, false
	}
	return o.DataCategory, true
}

// HasDataCategory returns a boolean if a field has been set.
func (o *SchemaSourcesInner) HasDataCategory() bool {
	if o != nil && o.DataCategory != nil {
		return true
	}

	return false
}

// SetDataCategory gets a reference to the given string and assigns it to the DataCategory field.
func (o *SchemaSourcesInner) SetDataCategory(v string) {
	o.DataCategory = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *SchemaSourcesInner) GetSources() []SchemaSourcesInnerSourcesInner {
	if o == nil || o.Sources == nil {
		var ret []SchemaSourcesInnerSourcesInner
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaSourcesInner) GetSourcesOk() ([]SchemaSourcesInnerSourcesInner, bool) {
	if o == nil || o.Sources == nil {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *SchemaSourcesInner) HasSources() bool {
	if o != nil && o.Sources != nil {
		return true
	}

	return false
}

// SetSources gets a reference to the given []SchemaSourcesInnerSourcesInner and assigns it to the Sources field.
func (o *SchemaSourcesInner) SetSources(v []SchemaSourcesInnerSourcesInner) {
	o.Sources = v
}

func (o SchemaSourcesInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["_id"] = o.Id
	}
	if o.DataCategory != nil {
		toSerialize["dataCategory"] = o.DataCategory
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaSourcesInner struct {
	value *SchemaSourcesInner
	isSet bool
}

func (v NullableSchemaSourcesInner) Get() *SchemaSourcesInner {
	return v.value
}

func (v *NullableSchemaSourcesInner) Set(val *SchemaSourcesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaSourcesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaSourcesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaSourcesInner(val *SchemaSourcesInner) *NullableSchemaSourcesInner {
	return &NullableSchemaSourcesInner{value: val, isSet: true}
}

func (v NullableSchemaSourcesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaSourcesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


