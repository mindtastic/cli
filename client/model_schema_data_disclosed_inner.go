/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 1.0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SchemaDataDisclosedInner struct for SchemaDataDisclosedInner
type SchemaDataDisclosedInner struct {
	Id *string `json:"_id,omitempty"`
	Category *string `json:"category,omitempty"`
	Purposes []SchemaDataDisclosedInnerPurposesInner `json:"purposes,omitempty"`
	LegalBases []SchemaDataDisclosedInnerLegalBasesInner `json:"legalBases,omitempty"`
	LegitimateInterests []SchemaDataDisclosedInnerLegitimateInterestsInner `json:"legitimateInterests,omitempty"`
	Recipients []SchemaDataDisclosedInnerRecipientsInner `json:"recipients,omitempty"`
	Storage []SchemaDataDisclosedInnerStorageInner `json:"storage,omitempty"`
	NonDisclosure *SchemaDataDisclosedInnerNonDisclosure `json:"nonDisclosure,omitempty"`
}

// NewSchemaDataDisclosedInner instantiates a new SchemaDataDisclosedInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaDataDisclosedInner() *SchemaDataDisclosedInner {
	this := SchemaDataDisclosedInner{}
	return &this
}

// NewSchemaDataDisclosedInnerWithDefaults instantiates a new SchemaDataDisclosedInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaDataDisclosedInnerWithDefaults() *SchemaDataDisclosedInner {
	this := SchemaDataDisclosedInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInner) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInner) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInner) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchemaDataDisclosedInner) SetId(v string) {
	o.Id = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInner) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInner) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInner) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *SchemaDataDisclosedInner) SetCategory(v string) {
	o.Category = &v
}

// GetPurposes returns the Purposes field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInner) GetPurposes() []SchemaDataDisclosedInnerPurposesInner {
	if o == nil || o.Purposes == nil {
		var ret []SchemaDataDisclosedInnerPurposesInner
		return ret
	}
	return o.Purposes
}

// GetPurposesOk returns a tuple with the Purposes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInner) GetPurposesOk() ([]SchemaDataDisclosedInnerPurposesInner, bool) {
	if o == nil || o.Purposes == nil {
		return nil, false
	}
	return o.Purposes, true
}

// HasPurposes returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInner) HasPurposes() bool {
	if o != nil && o.Purposes != nil {
		return true
	}

	return false
}

// SetPurposes gets a reference to the given []SchemaDataDisclosedInnerPurposesInner and assigns it to the Purposes field.
func (o *SchemaDataDisclosedInner) SetPurposes(v []SchemaDataDisclosedInnerPurposesInner) {
	o.Purposes = v
}

// GetLegalBases returns the LegalBases field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInner) GetLegalBases() []SchemaDataDisclosedInnerLegalBasesInner {
	if o == nil || o.LegalBases == nil {
		var ret []SchemaDataDisclosedInnerLegalBasesInner
		return ret
	}
	return o.LegalBases
}

// GetLegalBasesOk returns a tuple with the LegalBases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInner) GetLegalBasesOk() ([]SchemaDataDisclosedInnerLegalBasesInner, bool) {
	if o == nil || o.LegalBases == nil {
		return nil, false
	}
	return o.LegalBases, true
}

// HasLegalBases returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInner) HasLegalBases() bool {
	if o != nil && o.LegalBases != nil {
		return true
	}

	return false
}

// SetLegalBases gets a reference to the given []SchemaDataDisclosedInnerLegalBasesInner and assigns it to the LegalBases field.
func (o *SchemaDataDisclosedInner) SetLegalBases(v []SchemaDataDisclosedInnerLegalBasesInner) {
	o.LegalBases = v
}

// GetLegitimateInterests returns the LegitimateInterests field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInner) GetLegitimateInterests() []SchemaDataDisclosedInnerLegitimateInterestsInner {
	if o == nil || o.LegitimateInterests == nil {
		var ret []SchemaDataDisclosedInnerLegitimateInterestsInner
		return ret
	}
	return o.LegitimateInterests
}

// GetLegitimateInterestsOk returns a tuple with the LegitimateInterests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInner) GetLegitimateInterestsOk() ([]SchemaDataDisclosedInnerLegitimateInterestsInner, bool) {
	if o == nil || o.LegitimateInterests == nil {
		return nil, false
	}
	return o.LegitimateInterests, true
}

// HasLegitimateInterests returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInner) HasLegitimateInterests() bool {
	if o != nil && o.LegitimateInterests != nil {
		return true
	}

	return false
}

// SetLegitimateInterests gets a reference to the given []SchemaDataDisclosedInnerLegitimateInterestsInner and assigns it to the LegitimateInterests field.
func (o *SchemaDataDisclosedInner) SetLegitimateInterests(v []SchemaDataDisclosedInnerLegitimateInterestsInner) {
	o.LegitimateInterests = v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInner) GetRecipients() []SchemaDataDisclosedInnerRecipientsInner {
	if o == nil || o.Recipients == nil {
		var ret []SchemaDataDisclosedInnerRecipientsInner
		return ret
	}
	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInner) GetRecipientsOk() ([]SchemaDataDisclosedInnerRecipientsInner, bool) {
	if o == nil || o.Recipients == nil {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInner) HasRecipients() bool {
	if o != nil && o.Recipients != nil {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given []SchemaDataDisclosedInnerRecipientsInner and assigns it to the Recipients field.
func (o *SchemaDataDisclosedInner) SetRecipients(v []SchemaDataDisclosedInnerRecipientsInner) {
	o.Recipients = v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInner) GetStorage() []SchemaDataDisclosedInnerStorageInner {
	if o == nil || o.Storage == nil {
		var ret []SchemaDataDisclosedInnerStorageInner
		return ret
	}
	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInner) GetStorageOk() ([]SchemaDataDisclosedInnerStorageInner, bool) {
	if o == nil || o.Storage == nil {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInner) HasStorage() bool {
	if o != nil && o.Storage != nil {
		return true
	}

	return false
}

// SetStorage gets a reference to the given []SchemaDataDisclosedInnerStorageInner and assigns it to the Storage field.
func (o *SchemaDataDisclosedInner) SetStorage(v []SchemaDataDisclosedInnerStorageInner) {
	o.Storage = v
}

// GetNonDisclosure returns the NonDisclosure field value if set, zero value otherwise.
func (o *SchemaDataDisclosedInner) GetNonDisclosure() SchemaDataDisclosedInnerNonDisclosure {
	if o == nil || o.NonDisclosure == nil {
		var ret SchemaDataDisclosedInnerNonDisclosure
		return ret
	}
	return *o.NonDisclosure
}

// GetNonDisclosureOk returns a tuple with the NonDisclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDataDisclosedInner) GetNonDisclosureOk() (*SchemaDataDisclosedInnerNonDisclosure, bool) {
	if o == nil || o.NonDisclosure == nil {
		return nil, false
	}
	return o.NonDisclosure, true
}

// HasNonDisclosure returns a boolean if a field has been set.
func (o *SchemaDataDisclosedInner) HasNonDisclosure() bool {
	if o != nil && o.NonDisclosure != nil {
		return true
	}

	return false
}

// SetNonDisclosure gets a reference to the given SchemaDataDisclosedInnerNonDisclosure and assigns it to the NonDisclosure field.
func (o *SchemaDataDisclosedInner) SetNonDisclosure(v SchemaDataDisclosedInnerNonDisclosure) {
	o.NonDisclosure = &v
}

func (o SchemaDataDisclosedInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["_id"] = o.Id
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Purposes != nil {
		toSerialize["purposes"] = o.Purposes
	}
	if o.LegalBases != nil {
		toSerialize["legalBases"] = o.LegalBases
	}
	if o.LegitimateInterests != nil {
		toSerialize["legitimateInterests"] = o.LegitimateInterests
	}
	if o.Recipients != nil {
		toSerialize["recipients"] = o.Recipients
	}
	if o.Storage != nil {
		toSerialize["storage"] = o.Storage
	}
	if o.NonDisclosure != nil {
		toSerialize["nonDisclosure"] = o.NonDisclosure
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaDataDisclosedInner struct {
	value *SchemaDataDisclosedInner
	isSet bool
}

func (v NullableSchemaDataDisclosedInner) Get() *SchemaDataDisclosedInner {
	return v.value
}

func (v *NullableSchemaDataDisclosedInner) Set(val *SchemaDataDisclosedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaDataDisclosedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaDataDisclosedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaDataDisclosedInner(val *SchemaDataDisclosedInner) *NullableSchemaDataDisclosedInner {
	return &NullableSchemaDataDisclosedInner{value: val, isSet: true}
}

func (v NullableSchemaDataDisclosedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaDataDisclosedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


