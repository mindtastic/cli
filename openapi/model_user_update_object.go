/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserUpdateObject struct for UserUpdateObject
type UserUpdateObject struct {
	Email string `json:"email"`
}

// NewUserUpdateObject instantiates a new UserUpdateObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUpdateObject(email string) *UserUpdateObject {
	this := UserUpdateObject{}
	this.Email = email
	return &this
}

// NewUserUpdateObjectWithDefaults instantiates a new UserUpdateObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUpdateObjectWithDefaults() *UserUpdateObject {
	this := UserUpdateObject{}
	return &this
}

// GetEmail returns the Email field value
func (o *UserUpdateObject) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserUpdateObject) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserUpdateObject) SetEmail(v string) {
	o.Email = v
}

func (o UserUpdateObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableUserUpdateObject struct {
	value *UserUpdateObject
	isSet bool
}

func (v NullableUserUpdateObject) Get() *UserUpdateObject {
	return v.value
}

func (v *NullableUserUpdateObject) Set(val *UserUpdateObject) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdateObject) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdateObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdateObject(val *UserUpdateObject) *NullableUserUpdateObject {
	return &NullableUserUpdateObject{value: val, isSet: true}
}

func (v NullableUserUpdateObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdateObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


