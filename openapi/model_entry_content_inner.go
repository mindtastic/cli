/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EntryContentInner - struct for EntryContentInner
type EntryContentInner struct {
	MapmapOfStringinterface{} *map[string]interface{}
	String *string
}

// map[string]interface{}AsEntryContentInner is a convenience function that returns map[string]interface{} wrapped in EntryContentInner
func MapmapOfStringinterface{}AsEntryContentInner(v *map[string]interface{}) EntryContentInner {
	return EntryContentInner{
		MapmapOfStringinterface{}: v,
	}
}

// stringAsEntryContentInner is a convenience function that returns string wrapped in EntryContentInner
func StringAsEntryContentInner(v *string) EntryContentInner {
	return EntryContentInner{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EntryContentInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapmapOfStringinterface{}
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringinterface{})
	if err == nil {
		jsonMapmapOfStringinterface{}, _ := json.Marshal(dst.MapmapOfStringinterface{})
		if string(jsonMapmapOfStringinterface{}) == "{}" { // empty struct
			dst.MapmapOfStringinterface{} = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringinterface{} = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringinterface{} = nil
		dst.String = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(EntryContentInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(EntryContentInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EntryContentInner) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringinterface{} != nil {
		return json.Marshal(&src.MapmapOfStringinterface{})
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EntryContentInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringinterface{} != nil {
		return obj.MapmapOfStringinterface{}
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableEntryContentInner struct {
	value *EntryContentInner
	isSet bool
}

func (v NullableEntryContentInner) Get() *EntryContentInner {
	return v.value
}

func (v *NullableEntryContentInner) Set(val *EntryContentInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryContentInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryContentInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryContentInner(val *EntryContentInner) *NullableEntryContentInner {
	return &NullableEntryContentInner{value: val, isSet: true}
}

func (v NullableEntryContentInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryContentInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


