/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InsertionResponse struct for InsertionResponse
type InsertionResponse struct {
	// The HTTP status code of the response
	StatusCode *int32 `json:"status_code,omitempty"`
	// True if all provided wiki entries have been inserted successfully into the database
	Success *bool `json:"success,omitempty"`
	// The number of inserted wiki entries on the operation
	InsertedCount *int32 `json:"insertedCount,omitempty"`
}

// NewInsertionResponse instantiates a new InsertionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsertionResponse() *InsertionResponse {
	this := InsertionResponse{}
	return &this
}

// NewInsertionResponseWithDefaults instantiates a new InsertionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsertionResponseWithDefaults() *InsertionResponse {
	this := InsertionResponse{}
	return &this
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *InsertionResponse) GetStatusCode() int32 {
	if o == nil || o.StatusCode == nil {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsertionResponse) GetStatusCodeOk() (*int32, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *InsertionResponse) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *InsertionResponse) SetStatusCode(v int32) {
	o.StatusCode = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *InsertionResponse) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsertionResponse) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *InsertionResponse) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *InsertionResponse) SetSuccess(v bool) {
	o.Success = &v
}

// GetInsertedCount returns the InsertedCount field value if set, zero value otherwise.
func (o *InsertionResponse) GetInsertedCount() int32 {
	if o == nil || o.InsertedCount == nil {
		var ret int32
		return ret
	}
	return *o.InsertedCount
}

// GetInsertedCountOk returns a tuple with the InsertedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsertionResponse) GetInsertedCountOk() (*int32, bool) {
	if o == nil || o.InsertedCount == nil {
		return nil, false
	}
	return o.InsertedCount, true
}

// HasInsertedCount returns a boolean if a field has been set.
func (o *InsertionResponse) HasInsertedCount() bool {
	if o != nil && o.InsertedCount != nil {
		return true
	}

	return false
}

// SetInsertedCount gets a reference to the given int32 and assigns it to the InsertedCount field.
func (o *InsertionResponse) SetInsertedCount(v int32) {
	o.InsertedCount = &v
}

func (o InsertionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StatusCode != nil {
		toSerialize["status_code"] = o.StatusCode
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.InsertedCount != nil {
		toSerialize["insertedCount"] = o.InsertedCount
	}
	return json.Marshal(toSerialize)
}

type NullableInsertionResponse struct {
	value *InsertionResponse
	isSet bool
}

func (v NullableInsertionResponse) Get() *InsertionResponse {
	return v.value
}

func (v *NullableInsertionResponse) Set(val *InsertionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInsertionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInsertionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsertionResponse(val *InsertionResponse) *NullableInsertionResponse {
	return &NullableInsertionResponse{value: val, isSet: true}
}

func (v NullableInsertionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsertionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


