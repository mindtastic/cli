/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// MotivatorResult struct for MotivatorResult
type MotivatorResult struct {
	MotivatorId *string `json:"motivatorId,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Results []string `json:"results,omitempty"`
}

// NewMotivatorResult instantiates a new MotivatorResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMotivatorResult() *MotivatorResult {
	this := MotivatorResult{}
	return &this
}

// NewMotivatorResultWithDefaults instantiates a new MotivatorResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMotivatorResultWithDefaults() *MotivatorResult {
	this := MotivatorResult{}
	return &this
}

// GetMotivatorId returns the MotivatorId field value if set, zero value otherwise.
func (o *MotivatorResult) GetMotivatorId() string {
	if o == nil || o.MotivatorId == nil {
		var ret string
		return ret
	}
	return *o.MotivatorId
}

// GetMotivatorIdOk returns a tuple with the MotivatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MotivatorResult) GetMotivatorIdOk() (*string, bool) {
	if o == nil || o.MotivatorId == nil {
		return nil, false
	}
	return o.MotivatorId, true
}

// HasMotivatorId returns a boolean if a field has been set.
func (o *MotivatorResult) HasMotivatorId() bool {
	if o != nil && o.MotivatorId != nil {
		return true
	}

	return false
}

// SetMotivatorId gets a reference to the given string and assigns it to the MotivatorId field.
func (o *MotivatorResult) SetMotivatorId(v string) {
	o.MotivatorId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *MotivatorResult) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MotivatorResult) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MotivatorResult) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *MotivatorResult) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *MotivatorResult) GetResults() []string {
	if o == nil || o.Results == nil {
		var ret []string
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MotivatorResult) GetResultsOk() ([]string, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *MotivatorResult) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []string and assigns it to the Results field.
func (o *MotivatorResult) SetResults(v []string) {
	o.Results = v
}

func (o MotivatorResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MotivatorId != nil {
		toSerialize["motivatorId"] = o.MotivatorId
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableMotivatorResult struct {
	value *MotivatorResult
	isSet bool
}

func (v NullableMotivatorResult) Get() *MotivatorResult {
	return v.value
}

func (v *NullableMotivatorResult) Set(val *MotivatorResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMotivatorResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMotivatorResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMotivatorResult(val *MotivatorResult) *NullableMotivatorResult {
	return &NullableMotivatorResult{value: val, isSet: true}
}

func (v NullableMotivatorResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMotivatorResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


