/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserWithIdAllOf struct for UserWithIdAllOf
type UserWithIdAllOf struct {
	Id *float32 `json:"id,omitempty"`
}

// NewUserWithIdAllOf instantiates a new UserWithIdAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserWithIdAllOf() *UserWithIdAllOf {
	this := UserWithIdAllOf{}
	return &this
}

// NewUserWithIdAllOfWithDefaults instantiates a new UserWithIdAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithIdAllOfWithDefaults() *UserWithIdAllOf {
	this := UserWithIdAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserWithIdAllOf) GetId() float32 {
	if o == nil || o.Id == nil {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserWithIdAllOf) GetIdOk() (*float32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserWithIdAllOf) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *UserWithIdAllOf) SetId(v float32) {
	o.Id = &v
}

func (o UserWithIdAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableUserWithIdAllOf struct {
	value *UserWithIdAllOf
	isSet bool
}

func (v NullableUserWithIdAllOf) Get() *UserWithIdAllOf {
	return v.value
}

func (v *NullableUserWithIdAllOf) Set(val *UserWithIdAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUserWithIdAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUserWithIdAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserWithIdAllOf(val *UserWithIdAllOf) *NullableUserWithIdAllOf {
	return &NullableUserWithIdAllOf{value: val, isSet: true}
}

func (v NullableUserWithIdAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserWithIdAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


