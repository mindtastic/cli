/*
Kopfsachen

Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.

API version: 0.2
Contact: mail@kopfsachen.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Timestamp struct for Timestamp
type Timestamp struct {
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// NewTimestamp instantiates a new Timestamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimestamp() *Timestamp {
	this := Timestamp{}
	return &this
}

// NewTimestampWithDefaults instantiates a new Timestamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimestampWithDefaults() *Timestamp {
	this := Timestamp{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Timestamp) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Timestamp) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Timestamp) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *Timestamp) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o Timestamp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableTimestamp struct {
	value *Timestamp
	isSet bool
}

func (v NullableTimestamp) Get() *Timestamp {
	return v.value
}

func (v *NullableTimestamp) Set(val *Timestamp) {
	v.value = val
	v.isSet = true
}

func (v NullableTimestamp) IsSet() bool {
	return v.isSet
}

func (v *NullableTimestamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimestamp(val *Timestamp) *NullableTimestamp {
	return &NullableTimestamp{value: val, isSet: true}
}

func (v NullableTimestamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimestamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


