// Package cli provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for MoodType.
const (
	Negative MoodType = "negative"
	Neutral  MoodType = "neutral"
	Positive MoodType = "positive"
)

// Defines values for MotivatorMediaContentsFormat.
const (
	Audio    MotivatorMediaContentsFormat = "audio"
	Document MotivatorMediaContentsFormat = "document"
	Image    MotivatorMediaContentsFormat = "image"
	Video    MotivatorMediaContentsFormat = "video"
)

// Defines values for MotivatorType.
const (
	MotivatorTypeRelaxation       MotivatorType = "relaxation"
	MotivatorTypeSituationControl MotivatorType = "situationControl"
)

// Defines values for SafetyNetItemType.
const (
	SafetyNetItemTypeOther            SafetyNetItemType = "other"
	SafetyNetItemTypePet              SafetyNetItemType = "pet"
	SafetyNetItemTypeRelaxation       SafetyNetItemType = "relaxation"
	SafetyNetItemTypeSituationControl SafetyNetItemType = "situationControl"
)

// Defines values for SettingLang.
const (
	De SettingLang = "de"
	En SettingLang = "en"
)

// Defines values for UserRole.
const (
	UserRoleAdmin UserRole = "admin"
	UserRoleUser  UserRole = "user"
)

// Defines values for UserWithIdRole.
const (
	UserWithIdRoleAdmin UserWithIdRole = "admin"
	UserWithIdRoleUser  UserWithIdRole = "user"
)

// Login with FlowID
type LoginWithFlowIdRequest struct {
	CsrfToken  *string `json:"csrf_token,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	Method     *string `json:"method,omitempty"`
	Password   *string `json:"password,omitempty"`
}

// Mood defines model for mood.
type Mood struct {
	Description *string    `json:"description,omitempty"`
	Timestamp   *time.Time `json:"timestamp,omitempty"`
	Type        *MoodType  `json:"type,omitempty"`
}

// MoodType defines model for Mood.Type.
type MoodType string

// Motivator defines model for motivator.
type Motivator struct {
	Description   *string `json:"description,omitempty"`
	Headline      *string `json:"headline,omitempty"`
	Id            *string `json:"id,omitempty"`
	MediaContents *[]struct {
		Format *MotivatorMediaContentsFormat `json:"format,omitempty"`
		Url    *string                       `json:"url,omitempty"`
	} `json:"mediaContents,omitempty"`
	TextContents *[]string      `json:"textContents,omitempty"`
	Type         *MotivatorType `json:"type,omitempty"`

	// May describe a form for input by the user (format to be defined, e.g., JSON Schema).
	UserInputForm *string `json:"userInputForm,omitempty"`
}

// MotivatorMediaContentsFormat defines model for Motivator.MediaContents.Format.
type MotivatorMediaContentsFormat string

// MotivatorType defines model for Motivator.Type.
type MotivatorType string

// MotivatorResult defines model for motivatorResult.
type MotivatorResult struct {
	MotivatorId *string    `json:"motivatorId,omitempty"`
	Results     *[]string  `json:"results,omitempty"`
	Timestamp   *time.Time `json:"timestamp,omitempty"`
}

// Notification defines model for notification.
type Notification struct {
	*string   `json:",omitempty"`
	Content   *string    `json:"content,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Title     *string    `json:"title,omitempty"`

	// time to live (i.e., not relevant anymore at specified time)
	Ttl *time.Time `json:"ttl,omitempty"`
}

// Registration initialization
type Registration struct {
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// Registration with FlowID
type RegistrationWithFlowIdRequest struct {
	Method *string `json:"method,omitempty"`
}

// Registration with FlowID
type RegistrationWithFlowIdResponse struct {
	AccountKey *openapi_types.UUID `json:"accountKey,omitempty"`
}

// SafetyNetItem defines model for safetyNetItem.
type SafetyNetItem struct {
	Feedback *[]SafetyNetItemFeedback `json:"feedback,omitempty"`
	Name     string                   `json:"name"`

	// How can this item help the user to feel better?
	Strategies []string `json:"strategies"`

	// Which kind of item is this (i.a., influences symbol in UI)?
	Type SafetyNetItemType `json:"type"`
}

// Which kind of item is this (i.a., influences symbol in UI)?
type SafetyNetItemType string

// SafetyNetItemFeedback defines model for safetyNetItemFeedback.
type SafetyNetItemFeedback struct {
	Comment   *string    `json:"comment,omitempty"`
	ItHelped  *bool      `json:"itHelped,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// Session defines model for session.
type Session struct {
	Session      *map[string]interface{} `json:"session,omitempty"`
	SessionToken *string                 `json:"session_token,omitempty"`
}

// Key-value pairs of settings in the app.
type Setting struct {
	Lang *SettingLang `json:"lang,omitempty"`
}

// SettingLang defines model for Setting.Lang.
type SettingLang string

// A valid tilt document validates against the tilt schema: https://github.com/Transparency-Information-Language/schema/blob/master/tilt-schema.json
type Tilt struct {
	AccessAndDataPortability *struct {
		AdministrativeFee *struct {
			Amount   *float32 `json:"amount,omitempty"`
			Currency *string  `json:"currency,omitempty"`
		} `json:"administrativeFee,omitempty"`
		Available               *bool                     `json:"available,omitempty"`
		DataFormats             *[]map[string]interface{} `json:"dataFormats,omitempty"`
		Description             *string                   `json:"description,omitempty"`
		Email                   *string                   `json:"email,omitempty"`
		IdentificationEvidences *[]map[string]interface{} `json:"identificationEvidences,omitempty"`
		Url                     *string                   `json:"url,omitempty"`
	} `json:"accessAndDataPortability,omitempty"`
	AutomatedDecisionMaking *struct {
		InUse                   *bool   `json:"inUse,omitempty"`
		LogicInvolved           *string `json:"logicInvolved,omitempty"`
		ScopeAndIntendedEffects *string `json:"scopeAndIntendedEffects,omitempty"`
	} `json:"automatedDecisionMaking,omitempty"`
	ChangesOfPurpose *[]struct {
		AffectedDataCategories *[]map[string]interface{} `json:"affectedDataCategories,omitempty"`
		Description            *string                   `json:"description,omitempty"`
		PlannedDateOfChange    *string                   `json:"plannedDateOfChange,omitempty"`
		UrlOfNewVersion        *string                   `json:"urlOfNewVersion,omitempty"`
	} `json:"changesOfPurpose,omitempty"`
	Controller *struct {
		Address        *string `json:"address,omitempty"`
		Country        *string `json:"country,omitempty"`
		Division       *string `json:"division,omitempty"`
		Name           *string `json:"name,omitempty"`
		Representative *struct {
			Email *string `json:"email,omitempty"`
			Name  *string `json:"name,omitempty"`
			Phone *string `json:"phone,omitempty"`
		} `json:"representative,omitempty"`
	} `json:"controller,omitempty"`
	DataDisclosed *[]struct {
		Id         *string `json:"_id,omitempty"`
		Category   *string `json:"category,omitempty"`
		LegalBases *[]struct {
			Description *string `json:"description,omitempty"`
			Reference   *string `json:"reference,omitempty"`
		} `json:"legalBases,omitempty"`
		LegitimateInterests *[]struct {
			Exists    *bool   `json:"exists,omitempty"`
			Reasoning *string `json:"reasoning,omitempty"`
		} `json:"legitimateInterests,omitempty"`
		NonDisclosure *struct {
			Consequences          string `json:"consequences"`
			ContractualRegulation bool   `json:"contractualRegulation"`
			LegalRequirement      bool   `json:"legalRequirement"`
			ObligationToProvide   bool   `json:"obligationToProvide"`
		} `json:"nonDisclosure,omitempty"`
		Purposes *[]struct {
			Description *string `json:"description,omitempty"`
			Purpose     *string `json:"purpose,omitempty"`
		} `json:"purposes,omitempty"`
		Recipients *[]struct {
			Address        *string `json:"address,omitempty"`
			Category       *string `json:"category,omitempty"`
			Country        *string `json:"country,omitempty"`
			Division       *string `json:"division,omitempty"`
			Name           *string `json:"name,omitempty"`
			Representative *struct {
				Email string `json:"email"`
				Name  string `json:"name"`
				Phone string `json:"phone"`
			} `json:"representative,omitempty"`
		} `json:"recipients,omitempty"`
		Storage *[]struct {
			AggregationFunction   *string                   `json:"aggregationFunction,omitempty"`
			LegalBasisConditional *[]map[string]interface{} `json:"legalBasisConditional,omitempty"`
			PurposeConditional    *[]map[string]interface{} `json:"purposeConditional,omitempty"`
			Temporal              *[]struct {
				Description string `json:"description"`
				Ttl         string `json:"ttl"`
			} `json:"temporal,omitempty"`
		} `json:"storage,omitempty"`
	} `json:"dataDisclosed,omitempty"`
	DataProtectionOfficer *struct {
		Address *string `json:"address,omitempty"`
		Country *string `json:"country,omitempty"`
		Email   *string `json:"email,omitempty"`
		Name    *string `json:"name,omitempty"`
		Phone   *string `json:"phone,omitempty"`
	} `json:"dataProtectionOfficer,omitempty"`
	Meta *struct {
		Hash     *string  `json:"_hash,omitempty"`
		Id       *string  `json:"_id,omitempty"`
		Created  *string  `json:"created,omitempty"`
		Language *string  `json:"language,omitempty"`
		Modified *string  `json:"modified,omitempty"`
		Name     *string  `json:"name,omitempty"`
		Status   *string  `json:"status,omitempty"`
		Url      *string  `json:"url,omitempty"`
		Version  *float32 `json:"version,omitempty"`
	} `json:"meta,omitempty"`
	RightToComplain *struct {
		Available               *bool                     `json:"available,omitempty"`
		Description             *string                   `json:"description,omitempty"`
		Email                   *string                   `json:"email,omitempty"`
		IdentificationEvidences *[]map[string]interface{} `json:"identificationEvidences,omitempty"`
		SupervisoryAuthority    *struct {
			Address *string `json:"address,omitempty"`
			Country *string `json:"country,omitempty"`
			Email   *string `json:"email,omitempty"`
			Name    *string `json:"name,omitempty"`
			Phone   *string `json:"phone,omitempty"`
		} `json:"supervisoryAuthority,omitempty"`
		Url *string `json:"url,omitempty"`
	} `json:"rightToComplain,omitempty"`
	RightToDataPortability *struct {
		Available               *bool                     `json:"available,omitempty"`
		Description             *string                   `json:"description,omitempty"`
		Email                   *string                   `json:"email,omitempty"`
		IdentificationEvidences *[]map[string]interface{} `json:"identificationEvidences,omitempty"`
		Url                     *string                   `json:"url,omitempty"`
	} `json:"rightToDataPortability,omitempty"`
	RightToInformation *struct {
		Available               *bool                     `json:"available,omitempty"`
		Description             *string                   `json:"description,omitempty"`
		Email                   *string                   `json:"email,omitempty"`
		IdentificationEvidences *[]map[string]interface{} `json:"identificationEvidences,omitempty"`
		Url                     *string                   `json:"url,omitempty"`
	} `json:"rightToInformation,omitempty"`
	RightToRectificationOrDeletion *struct {
		Available               *bool                     `json:"available,omitempty"`
		Description             *string                   `json:"description,omitempty"`
		Email                   *string                   `json:"email,omitempty"`
		IdentificationEvidences *[]map[string]interface{} `json:"identificationEvidences,omitempty"`
		Url                     *string                   `json:"url,omitempty"`
	} `json:"rightToRectificationOrDeletion,omitempty"`
	RightToWithdrawConsent *struct {
		Available               *bool                     `json:"available,omitempty"`
		Description             *string                   `json:"description,omitempty"`
		Email                   *string                   `json:"email,omitempty"`
		IdentificationEvidences *[]map[string]interface{} `json:"identificationEvidences,omitempty"`
		Url                     *string                   `json:"url,omitempty"`
	} `json:"rightToWithdrawConsent,omitempty"`
	Sources *[]struct {
		Id           *string `json:"_id,omitempty"`
		DataCategory *string `json:"dataCategory,omitempty"`
		Sources      *[]struct {
			Description       *string `json:"description,omitempty"`
			PubliclyAvailable *bool   `json:"publiclyAvailable,omitempty"`
			Url               *string `json:"url,omitempty"`
		} `json:"sources,omitempty"`
	} `json:"sources,omitempty"`
	ThirdCountryTransfers *[]struct {
		AdequacyDecision *struct {
			Available   *bool   `json:"available,omitempty"`
			Description *string `json:"description,omitempty"`
		} `json:"adequacyDecision,omitempty"`
		AppropriateGuarantees *struct {
			Available   *bool   `json:"available,omitempty"`
			Description *string `json:"description,omitempty"`
		} `json:"appropriateGuarantees,omitempty"`
		Country                                         *string `json:"country,omitempty"`
		PresenceOfEnforceableRightsAndEffectiveRemedies *struct {
			Available   *bool   `json:"available,omitempty"`
			Description *string `json:"description,omitempty"`
		} `json:"presenceOfEnforceableRightsAndEffectiveRemedies,omitempty"`
		StandardDataProtectionClause *struct {
			Available   *bool   `json:"available,omitempty"`
			Description *string `json:"description,omitempty"`
		} `json:"standardDataProtectionClause,omitempty"`
	} `json:"thirdCountryTransfers,omitempty"`
}

// A user object
type User struct {
	// Refers to privileges.
	Role     *UserRole          `json:"role,omitempty"`
	UserId   openapi_types.UUID `json:"user_id"`
	Username *string            `json:"username,omitempty"`
}

// Refers to privileges.
type UserRole string

// UserWithId defines model for user-with-id.
type UserWithId struct {
	Id *float32 `json:"id,omitempty"`

	// Refers to privileges.
	Role     *UserWithIdRole    `json:"role,omitempty"`
	UserId   openapi_types.UUID `json:"user_id"`
	Username *string            `json:"username,omitempty"`
}

// Refers to privileges.
type UserWithIdRole string

// WikiEntry defines model for wikiEntry.
type WikiEntry struct {
	Content *[]interface{} `json:"content,omitempty"`
	Title   *string        `json:"title,omitempty"`
}

// Flow defines model for flow.
type Flow = string

// MotivatorId defines model for motivatorId.
type MotivatorId = int

// UserId defines model for userId.
type UserId = int

// WikiEntryId defines model for wikiEntryId.
type WikiEntryId = string

// DeleteuserUserIdDiaryParams defines parameters for DeleteuserUserIdDiary.
type DeleteuserUserIdDiaryParams struct {
	XUserId openapi_types.UUID `json:"X-user-Id"`
}

// GetDiaryParams defines parameters for GetDiary.
type GetDiaryParams struct {
	XUserId openapi_types.UUID `json:"X-userId"`
}

// PostDiaryUserIdJSONBody defines parameters for PostDiaryUserId.
type PostDiaryUserIdJSONBody = Mood

// PostDiaryUserIdParams defines parameters for PostDiaryUserId.
type PostDiaryUserIdParams struct {
	XUserId openapi_types.UUID `json:"X-userId"`
}

// PostMotivatorJSONBody defines parameters for PostMotivator.
type PostMotivatorJSONBody = Motivator

// PostMotivatorUserIdJSONBody defines parameters for PostMotivatorUserId.
type PostMotivatorUserIdJSONBody = Motivator

// PostMotivatorUserIdFeedbackMotivatorIdJSONBody defines parameters for PostMotivatorUserIdFeedbackMotivatorId.
type PostMotivatorUserIdFeedbackMotivatorIdJSONBody = MotivatorResult

// PostNotificationUserIdJSONBody defines parameters for PostNotificationUserId.
type PostNotificationUserIdJSONBody = Notification

// PostUserUserIdSafetyNetJSONBody defines parameters for PostUserUserIdSafetyNet.
type PostUserUserIdSafetyNetJSONBody = SafetyNetItem

// PostSelfServiceLoginJSONBody defines parameters for PostSelfServiceLogin.
type PostSelfServiceLoginJSONBody = LoginWithFlowIdRequest

// PostSelfServiceLoginParams defines parameters for PostSelfServiceLogin.
type PostSelfServiceLoginParams struct {
	Flow Flow `form:"flow" json:"flow"`
}

// PostSelfServiceRegistrationJSONBody defines parameters for PostSelfServiceRegistration.
type PostSelfServiceRegistrationJSONBody = RegistrationWithFlowIdRequest

// PostSelfServiceRegistrationParams defines parameters for PostSelfServiceRegistration.
type PostSelfServiceRegistrationParams struct {
	Flow Flow `form:"flow" json:"flow"`
}

// PostTiltJSONBody defines parameters for PostTilt.
type PostTiltJSONBody = Tilt

// PostUserJSONBody defines parameters for PostUser.
type PostUserJSONBody = User

// PutUserIdJSONBody defines parameters for PutUserId.
type PutUserIdJSONBody = User

// PostUserUserIdSettingsJSONBody defines parameters for PostUserUserIdSettings.
type PostUserUserIdSettingsJSONBody = []Setting

// PostWikiJSONBody defines parameters for PostWiki.
type PostWikiJSONBody = []WikiEntry

// PostDiaryUserIdJSONRequestBody defines body for PostDiaryUserId for application/json ContentType.
type PostDiaryUserIdJSONRequestBody = PostDiaryUserIdJSONBody

// PostMotivatorJSONRequestBody defines body for PostMotivator for application/json ContentType.
type PostMotivatorJSONRequestBody = PostMotivatorJSONBody

// PostMotivatorUserIdJSONRequestBody defines body for PostMotivatorUserId for application/json ContentType.
type PostMotivatorUserIdJSONRequestBody = PostMotivatorUserIdJSONBody

// PostMotivatorUserIdFeedbackMotivatorIdJSONRequestBody defines body for PostMotivatorUserIdFeedbackMotivatorId for application/json ContentType.
type PostMotivatorUserIdFeedbackMotivatorIdJSONRequestBody = PostMotivatorUserIdFeedbackMotivatorIdJSONBody

// PostNotificationUserIdJSONRequestBody defines body for PostNotificationUserId for application/json ContentType.
type PostNotificationUserIdJSONRequestBody = PostNotificationUserIdJSONBody

// PostUserUserIdSafetyNetJSONRequestBody defines body for PostUserUserIdSafetyNet for application/json ContentType.
type PostUserUserIdSafetyNetJSONRequestBody = PostUserUserIdSafetyNetJSONBody

// PostSelfServiceLoginJSONRequestBody defines body for PostSelfServiceLogin for application/json ContentType.
type PostSelfServiceLoginJSONRequestBody = PostSelfServiceLoginJSONBody

// PostSelfServiceRegistrationJSONRequestBody defines body for PostSelfServiceRegistration for application/json ContentType.
type PostSelfServiceRegistrationJSONRequestBody = PostSelfServiceRegistrationJSONBody

// PostTiltJSONRequestBody defines body for PostTilt for application/json ContentType.
type PostTiltJSONRequestBody = PostTiltJSONBody

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody = PostUserJSONBody

// PutUserIdJSONRequestBody defines body for PutUserId for application/json ContentType.
type PutUserIdJSONRequestBody = PutUserIdJSONBody

// PostUserUserIdSettingsJSONRequestBody defines body for PostUserUserIdSettings for application/json ContentType.
type PostUserUserIdSettingsJSONRequestBody = PostUserUserIdSettingsJSONBody

// PostWikiJSONRequestBody defines body for PostWiki for application/json ContentType.
type PostWikiJSONRequestBody = PostWikiJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteuserUserIdDiary request
	DeleteuserUserIdDiary(ctx context.Context, params *DeleteuserUserIdDiaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDiary request
	GetDiary(ctx context.Context, params *GetDiaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiaryUserId request with any body
	PostDiaryUserIdWithBody(ctx context.Context, params *PostDiaryUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiaryUserId(ctx context.Context, params *PostDiaryUserIdParams, body PostDiaryUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMotivator request
	DeleteMotivator(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMotivatorsUserId request
	GetMotivatorsUserId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMotivator request with any body
	PostMotivatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMotivator(ctx context.Context, body PostMotivatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMotivatorUserId request
	DeleteMotivatorUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMotivatorUserId request
	GetMotivatorUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMotivatorUserId request with any body
	PostMotivatorUserIdWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMotivatorUserId(ctx context.Context, userId UserId, body PostMotivatorUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMotivatorUserIdResultMotivatorId request
	DeleteMotivatorUserIdResultMotivatorId(ctx context.Context, userId UserId, motivatorId MotivatorId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMotivatorUserIdFeedbackMotivatorId request with any body
	PostMotivatorUserIdFeedbackMotivatorIdWithBody(ctx context.Context, userId UserId, motivatorId MotivatorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMotivatorUserIdFeedbackMotivatorId(ctx context.Context, userId UserId, motivatorId MotivatorId, body PostMotivatorUserIdFeedbackMotivatorIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNotificationUserId request
	DeleteNotificationUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotificationUserId request
	GetNotificationUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNotificationUserId request with any body
	PostNotificationUserIdWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNotificationUserId(ctx context.Context, userId UserId, body PostNotificationUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSafetyNet request
	GetSafetyNet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserUserIdSafetyNet request
	DeleteUserUserIdSafetyNet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserUserIdSafetyNet request
	GetUserUserIdSafetyNet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUserIdSafetyNet request with any body
	PostUserUserIdSafetyNetWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdSafetyNet(ctx context.Context, userId int, body PostUserUserIdSafetyNetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSelfServiceLogin request with any body
	PostSelfServiceLoginWithBody(ctx context.Context, params *PostSelfServiceLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSelfServiceLogin(ctx context.Context, params *PostSelfServiceLoginParams, body PostSelfServiceLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelfServiceLoginApi request
	GetSelfServiceLoginApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSelfServiceLogout request
	DeleteSelfServiceLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSelfServiceRegistration request with any body
	PostSelfServiceRegistrationWithBody(ctx context.Context, params *PostSelfServiceRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSelfServiceRegistration(ctx context.Context, params *PostSelfServiceRegistrationParams, body PostSelfServiceRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelfServiceRegistrationApi request
	GetSelfServiceRegistrationApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTilt request
	GetTilt(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTilt request with any body
	PostTiltWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTilt(ctx context.Context, body PostTiltJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUser request with any body
	PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserId request
	DeleteUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserId request
	GetUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserId request with any body
	PutUserIdWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserId(ctx context.Context, userId UserId, body PutUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserSettings request
	DeleteUserSettings(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSettings request
	GetUserSettings(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUserIdSettings request with any body
	PostUserUserIdSettingsWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdSettings(ctx context.Context, userId UserId, body PostUserUserIdSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWiki request
	DeleteWiki(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWiki request
	GetWiki(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWiki request with any body
	PostWikiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWiki(ctx context.Context, body PostWikiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWikiWikiEntryId request
	GetWikiWikiEntryId(ctx context.Context, wikiEntryId WikiEntryId, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteuserUserIdDiary(ctx context.Context, params *DeleteuserUserIdDiaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteuserUserIdDiaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiary(ctx context.Context, params *GetDiaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiaryUserIdWithBody(ctx context.Context, params *PostDiaryUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiaryUserIdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiaryUserId(ctx context.Context, params *PostDiaryUserIdParams, body PostDiaryUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiaryUserIdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMotivator(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMotivatorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMotivatorsUserId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMotivatorsUserIdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMotivatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMotivatorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMotivator(ctx context.Context, body PostMotivatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMotivatorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMotivatorUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMotivatorUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMotivatorUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMotivatorUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMotivatorUserIdWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMotivatorUserIdRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMotivatorUserId(ctx context.Context, userId UserId, body PostMotivatorUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMotivatorUserIdRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMotivatorUserIdResultMotivatorId(ctx context.Context, userId UserId, motivatorId MotivatorId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMotivatorUserIdResultMotivatorIdRequest(c.Server, userId, motivatorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMotivatorUserIdFeedbackMotivatorIdWithBody(ctx context.Context, userId UserId, motivatorId MotivatorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMotivatorUserIdFeedbackMotivatorIdRequestWithBody(c.Server, userId, motivatorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMotivatorUserIdFeedbackMotivatorId(ctx context.Context, userId UserId, motivatorId MotivatorId, body PostMotivatorUserIdFeedbackMotivatorIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMotivatorUserIdFeedbackMotivatorIdRequest(c.Server, userId, motivatorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotificationUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotificationUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotificationUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotificationUserIdWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotificationUserIdRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotificationUserId(ctx context.Context, userId UserId, body PostNotificationUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotificationUserIdRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSafetyNet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSafetyNetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserUserIdSafetyNet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserUserIdSafetyNetRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUserIdSafetyNet(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserUserIdSafetyNetRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdSafetyNetWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdSafetyNetRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdSafetyNet(ctx context.Context, userId int, body PostUserUserIdSafetyNetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdSafetyNetRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSelfServiceLoginWithBody(ctx context.Context, params *PostSelfServiceLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSelfServiceLoginRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSelfServiceLogin(ctx context.Context, params *PostSelfServiceLoginParams, body PostSelfServiceLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSelfServiceLoginRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelfServiceLoginApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfServiceLoginApiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSelfServiceLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSelfServiceLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSelfServiceRegistrationWithBody(ctx context.Context, params *PostSelfServiceRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSelfServiceRegistrationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSelfServiceRegistration(ctx context.Context, params *PostSelfServiceRegistrationParams, body PostSelfServiceRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSelfServiceRegistrationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelfServiceRegistrationApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfServiceRegistrationApiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTilt(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTiltRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTiltWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTiltRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTilt(ctx context.Context, body PostTiltJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTiltRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserIdWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserId(ctx context.Context, userId UserId, body PutUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserSettings(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserSettingsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSettings(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSettingsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdSettingsWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdSettingsRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdSettings(ctx context.Context, userId UserId, body PostUserUserIdSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdSettingsRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWiki(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWikiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWiki(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWikiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWikiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWikiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWiki(ctx context.Context, body PostWikiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWikiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWikiWikiEntryId(ctx context.Context, wikiEntryId WikiEntryId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWikiWikiEntryIdRequest(c.Server, wikiEntryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteuserUserIdDiaryRequest generates requests for DeleteuserUserIdDiary
func NewDeleteuserUserIdDiaryRequest(server string, params *DeleteuserUserIdDiaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/diary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-user-Id", runtime.ParamLocationHeader, params.XUserId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-user-Id", headerParam0)

	return req, nil
}

// NewGetDiaryRequest generates requests for GetDiary
func NewGetDiaryRequest(server string, params *GetDiaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/diary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-userId", runtime.ParamLocationHeader, params.XUserId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-userId", headerParam0)

	return req, nil
}

// NewPostDiaryUserIdRequest calls the generic PostDiaryUserId builder with application/json body
func NewPostDiaryUserIdRequest(server string, params *PostDiaryUserIdParams, body PostDiaryUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiaryUserIdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostDiaryUserIdRequestWithBody generates requests for PostDiaryUserId with any type of body
func NewPostDiaryUserIdRequestWithBody(server string, params *PostDiaryUserIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/diary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-userId", runtime.ParamLocationHeader, params.XUserId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-userId", headerParam0)

	return req, nil
}

// NewDeleteMotivatorRequest generates requests for DeleteMotivator
func NewDeleteMotivatorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/motivator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMotivatorsUserIdRequest generates requests for GetMotivatorsUserId
func NewGetMotivatorsUserIdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/motivator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMotivatorRequest calls the generic PostMotivator builder with application/json body
func NewPostMotivatorRequest(server string, body PostMotivatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMotivatorRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMotivatorRequestWithBody generates requests for PostMotivator with any type of body
func NewPostMotivatorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/motivator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMotivatorUserIdRequest generates requests for DeleteMotivatorUserId
func NewDeleteMotivatorUserIdRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/motivator/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMotivatorUserIdRequest generates requests for GetMotivatorUserId
func NewGetMotivatorUserIdRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/motivator/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMotivatorUserIdRequest calls the generic PostMotivatorUserId builder with application/json body
func NewPostMotivatorUserIdRequest(server string, userId UserId, body PostMotivatorUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMotivatorUserIdRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostMotivatorUserIdRequestWithBody generates requests for PostMotivatorUserId with any type of body
func NewPostMotivatorUserIdRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/motivator/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMotivatorUserIdResultMotivatorIdRequest generates requests for DeleteMotivatorUserIdResultMotivatorId
func NewDeleteMotivatorUserIdResultMotivatorIdRequest(server string, userId UserId, motivatorId MotivatorId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "motivatorId", runtime.ParamLocationPath, motivatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/motivator/%s/result/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMotivatorUserIdFeedbackMotivatorIdRequest calls the generic PostMotivatorUserIdFeedbackMotivatorId builder with application/json body
func NewPostMotivatorUserIdFeedbackMotivatorIdRequest(server string, userId UserId, motivatorId MotivatorId, body PostMotivatorUserIdFeedbackMotivatorIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMotivatorUserIdFeedbackMotivatorIdRequestWithBody(server, userId, motivatorId, "application/json", bodyReader)
}

// NewPostMotivatorUserIdFeedbackMotivatorIdRequestWithBody generates requests for PostMotivatorUserIdFeedbackMotivatorId with any type of body
func NewPostMotivatorUserIdFeedbackMotivatorIdRequestWithBody(server string, userId UserId, motivatorId MotivatorId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "motivatorId", runtime.ParamLocationPath, motivatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/motivator/%s/result/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNotificationUserIdRequest generates requests for DeleteNotificationUserId
func NewDeleteNotificationUserIdRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNotificationUserIdRequest generates requests for GetNotificationUserId
func NewGetNotificationUserIdRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostNotificationUserIdRequest calls the generic PostNotificationUserId builder with application/json body
func NewPostNotificationUserIdRequest(server string, userId UserId, body PostNotificationUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNotificationUserIdRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostNotificationUserIdRequestWithBody generates requests for PostNotificationUserId with any type of body
func NewPostNotificationUserIdRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSafetyNetRequest generates requests for GetSafetyNet
func NewGetSafetyNetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/safetyNet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserUserIdSafetyNetRequest generates requests for DeleteUserUserIdSafetyNet
func NewDeleteUserUserIdSafetyNetRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/safetyNet/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserUserIdSafetyNetRequest generates requests for GetUserUserIdSafetyNet
func NewGetUserUserIdSafetyNetRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/safetyNet/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserUserIdSafetyNetRequest calls the generic PostUserUserIdSafetyNet builder with application/json body
func NewPostUserUserIdSafetyNetRequest(server string, userId int, body PostUserUserIdSafetyNetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdSafetyNetRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostUserUserIdSafetyNetRequestWithBody generates requests for PostUserUserIdSafetyNet with any type of body
func NewPostUserUserIdSafetyNetRequestWithBody(server string, userId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/safetyNet/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSelfServiceLoginRequest calls the generic PostSelfServiceLogin builder with application/json body
func NewPostSelfServiceLoginRequest(server string, params *PostSelfServiceLoginParams, body PostSelfServiceLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSelfServiceLoginRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSelfServiceLoginRequestWithBody generates requests for PostSelfServiceLogin with any type of body
func NewPostSelfServiceLoginRequestWithBody(server string, params *PostSelfServiceLoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/self-service/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flow", runtime.ParamLocationQuery, params.Flow); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSelfServiceLoginApiRequest generates requests for GetSelfServiceLoginApi
func NewGetSelfServiceLoginApiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/self-service/login/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSelfServiceLogoutRequest generates requests for DeleteSelfServiceLogout
func NewDeleteSelfServiceLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/self-service/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSelfServiceRegistrationRequest calls the generic PostSelfServiceRegistration builder with application/json body
func NewPostSelfServiceRegistrationRequest(server string, params *PostSelfServiceRegistrationParams, body PostSelfServiceRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSelfServiceRegistrationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSelfServiceRegistrationRequestWithBody generates requests for PostSelfServiceRegistration with any type of body
func NewPostSelfServiceRegistrationRequestWithBody(server string, params *PostSelfServiceRegistrationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/self-service/registration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flow", runtime.ParamLocationQuery, params.Flow); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSelfServiceRegistrationApiRequest generates requests for GetSelfServiceRegistrationApi
func NewGetSelfServiceRegistrationApiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/self-service/registration/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTiltRequest generates requests for GetTilt
func NewGetTiltRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tilt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTiltRequest calls the generic PostTilt builder with application/json body
func NewPostTiltRequest(server string, body PostTiltJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTiltRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTiltRequestWithBody generates requests for PostTilt with any type of body
func NewPostTiltRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tilt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserRequest calls the generic PostUser builder with application/json body
func NewPostUserRequest(server string, body PostUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserRequestWithBody generates requests for PostUser with any type of body
func NewPostUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserIdRequest generates requests for DeleteUserId
func NewDeleteUserIdRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserIdRequest generates requests for GetUserId
func NewGetUserIdRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUserIdRequest calls the generic PutUserId builder with application/json body
func NewPutUserIdRequest(server string, userId UserId, body PutUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserIdRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPutUserIdRequestWithBody generates requests for PutUserId with any type of body
func NewPutUserIdRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserSettingsRequest generates requests for DeleteUserSettings
func NewDeleteUserSettingsRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserSettingsRequest generates requests for GetUserSettings
func NewGetUserSettingsRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserUserIdSettingsRequest calls the generic PostUserUserIdSettings builder with application/json body
func NewPostUserUserIdSettingsRequest(server string, userId UserId, body PostUserUserIdSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdSettingsRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostUserUserIdSettingsRequestWithBody generates requests for PostUserUserIdSettings with any type of body
func NewPostUserUserIdSettingsRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWikiRequest generates requests for DeleteWiki
func NewDeleteWikiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wiki")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWikiRequest generates requests for GetWiki
func NewGetWikiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wiki")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWikiRequest calls the generic PostWiki builder with application/json body
func NewPostWikiRequest(server string, body PostWikiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWikiRequestWithBody(server, "application/json", bodyReader)
}

// NewPostWikiRequestWithBody generates requests for PostWiki with any type of body
func NewPostWikiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wiki")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWikiWikiEntryIdRequest generates requests for GetWikiWikiEntryId
func NewGetWikiWikiEntryIdRequest(server string, wikiEntryId WikiEntryId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wikiEntryId", runtime.ParamLocationPath, wikiEntryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wiki/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteuserUserIdDiary request
	DeleteuserUserIdDiaryWithResponse(ctx context.Context, params *DeleteuserUserIdDiaryParams, reqEditors ...RequestEditorFn) (*DeleteuserUserIdDiaryResponse, error)

	// GetDiary request
	GetDiaryWithResponse(ctx context.Context, params *GetDiaryParams, reqEditors ...RequestEditorFn) (*GetDiaryResponse, error)

	// PostDiaryUserId request with any body
	PostDiaryUserIdWithBodyWithResponse(ctx context.Context, params *PostDiaryUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiaryUserIdResponse, error)

	PostDiaryUserIdWithResponse(ctx context.Context, params *PostDiaryUserIdParams, body PostDiaryUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiaryUserIdResponse, error)

	// DeleteMotivator request
	DeleteMotivatorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteMotivatorResponse, error)

	// GetMotivatorsUserId request
	GetMotivatorsUserIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMotivatorsUserIdResponse, error)

	// PostMotivator request with any body
	PostMotivatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMotivatorResponse, error)

	PostMotivatorWithResponse(ctx context.Context, body PostMotivatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMotivatorResponse, error)

	// DeleteMotivatorUserId request
	DeleteMotivatorUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*DeleteMotivatorUserIdResponse, error)

	// GetMotivatorUserId request
	GetMotivatorUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetMotivatorUserIdResponse, error)

	// PostMotivatorUserId request with any body
	PostMotivatorUserIdWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMotivatorUserIdResponse, error)

	PostMotivatorUserIdWithResponse(ctx context.Context, userId UserId, body PostMotivatorUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMotivatorUserIdResponse, error)

	// DeleteMotivatorUserIdResultMotivatorId request
	DeleteMotivatorUserIdResultMotivatorIdWithResponse(ctx context.Context, userId UserId, motivatorId MotivatorId, reqEditors ...RequestEditorFn) (*DeleteMotivatorUserIdResultMotivatorIdResponse, error)

	// PostMotivatorUserIdFeedbackMotivatorId request with any body
	PostMotivatorUserIdFeedbackMotivatorIdWithBodyWithResponse(ctx context.Context, userId UserId, motivatorId MotivatorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMotivatorUserIdFeedbackMotivatorIdResponse, error)

	PostMotivatorUserIdFeedbackMotivatorIdWithResponse(ctx context.Context, userId UserId, motivatorId MotivatorId, body PostMotivatorUserIdFeedbackMotivatorIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMotivatorUserIdFeedbackMotivatorIdResponse, error)

	// DeleteNotificationUserId request
	DeleteNotificationUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*DeleteNotificationUserIdResponse, error)

	// GetNotificationUserId request
	GetNotificationUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetNotificationUserIdResponse, error)

	// PostNotificationUserId request with any body
	PostNotificationUserIdWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotificationUserIdResponse, error)

	PostNotificationUserIdWithResponse(ctx context.Context, userId UserId, body PostNotificationUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotificationUserIdResponse, error)

	// GetSafetyNet request
	GetSafetyNetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSafetyNetResponse, error)

	// DeleteUserUserIdSafetyNet request
	DeleteUserUserIdSafetyNetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*DeleteUserUserIdSafetyNetResponse, error)

	// GetUserUserIdSafetyNet request
	GetUserUserIdSafetyNetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserUserIdSafetyNetResponse, error)

	// PostUserUserIdSafetyNet request with any body
	PostUserUserIdSafetyNetWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdSafetyNetResponse, error)

	PostUserUserIdSafetyNetWithResponse(ctx context.Context, userId int, body PostUserUserIdSafetyNetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdSafetyNetResponse, error)

	// PostSelfServiceLogin request with any body
	PostSelfServiceLoginWithBodyWithResponse(ctx context.Context, params *PostSelfServiceLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSelfServiceLoginResponse, error)

	PostSelfServiceLoginWithResponse(ctx context.Context, params *PostSelfServiceLoginParams, body PostSelfServiceLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSelfServiceLoginResponse, error)

	// GetSelfServiceLoginApi request
	GetSelfServiceLoginApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfServiceLoginApiResponse, error)

	// DeleteSelfServiceLogout request
	DeleteSelfServiceLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteSelfServiceLogoutResponse, error)

	// PostSelfServiceRegistration request with any body
	PostSelfServiceRegistrationWithBodyWithResponse(ctx context.Context, params *PostSelfServiceRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSelfServiceRegistrationResponse, error)

	PostSelfServiceRegistrationWithResponse(ctx context.Context, params *PostSelfServiceRegistrationParams, body PostSelfServiceRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSelfServiceRegistrationResponse, error)

	// GetSelfServiceRegistrationApi request
	GetSelfServiceRegistrationApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfServiceRegistrationApiResponse, error)

	// GetTilt request
	GetTiltWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTiltResponse, error)

	// PostTilt request with any body
	PostTiltWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTiltResponse, error)

	PostTiltWithResponse(ctx context.Context, body PostTiltJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTiltResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// PostUser request with any body
	PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserResponse, error)

	PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserResponse, error)

	// DeleteUserId request
	DeleteUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*DeleteUserIdResponse, error)

	// GetUserId request
	GetUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserIdResponse, error)

	// PutUserId request with any body
	PutUserIdWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserIdResponse, error)

	PutUserIdWithResponse(ctx context.Context, userId UserId, body PutUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserIdResponse, error)

	// DeleteUserSettings request
	DeleteUserSettingsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*DeleteUserSettingsResponse, error)

	// GetUserSettings request
	GetUserSettingsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserSettingsResponse, error)

	// PostUserUserIdSettings request with any body
	PostUserUserIdSettingsWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdSettingsResponse, error)

	PostUserUserIdSettingsWithResponse(ctx context.Context, userId UserId, body PostUserUserIdSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdSettingsResponse, error)

	// DeleteWiki request
	DeleteWikiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteWikiResponse, error)

	// GetWiki request
	GetWikiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWikiResponse, error)

	// PostWiki request with any body
	PostWikiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWikiResponse, error)

	PostWikiWithResponse(ctx context.Context, body PostWikiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWikiResponse, error)

	// GetWikiWikiEntryId request
	GetWikiWikiEntryIdWithResponse(ctx context.Context, wikiEntryId WikiEntryId, reqEditors ...RequestEditorFn) (*GetWikiWikiEntryIdResponse, error)
}

type DeleteuserUserIdDiaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteuserUserIdDiaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteuserUserIdDiaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Mood
}

// Status returns HTTPResponse.Status
func (r GetDiaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiaryUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiaryUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiaryUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMotivatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMotivatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMotivatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMotivatorsUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Motivator
}

// Status returns HTTPResponse.Status
func (r GetMotivatorsUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMotivatorsUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMotivatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMotivatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMotivatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMotivatorUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMotivatorUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMotivatorUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMotivatorUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description   *string `json:"description,omitempty"`
		Headline      *string `json:"headline,omitempty"`
		Id            *string `json:"id,omitempty"`
		MediaContents *[]struct {
			Format *N200MediaContentsFormat `json:"format,omitempty"`
			Url    *string                  `json:"url,omitempty"`
		} `json:"mediaContents,omitempty"`
		MotivatorId  *string    `json:"motivatorId,omitempty"`
		Results      *[]string  `json:"results,omitempty"`
		TextContents *[]string  `json:"textContents,omitempty"`
		Timestamp    *time.Time `json:"timestamp,omitempty"`
		Type         *N200Type  `json:"type,omitempty"`

		// May describe a form for input by the user (format to be defined, e.g., JSON Schema).
		UserInputForm *string `json:"userInputForm,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMotivatorUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMotivatorUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMotivatorUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMotivatorUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMotivatorUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMotivatorUserIdResultMotivatorIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMotivatorUserIdResultMotivatorIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMotivatorUserIdResultMotivatorIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMotivatorUserIdFeedbackMotivatorIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMotivatorUserIdFeedbackMotivatorIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMotivatorUserIdFeedbackMotivatorIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNotificationUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteNotificationUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNotificationUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Notification
}

// Status returns HTTPResponse.Status
func (r GetNotificationUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNotificationUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostNotificationUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNotificationUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSafetyNetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SafetyNetItem
}

// Status returns HTTPResponse.Status
func (r GetSafetyNetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSafetyNetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserUserIdSafetyNetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserUserIdSafetyNetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserUserIdSafetyNetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserUserIdSafetyNetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SafetyNetItem
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdSafetyNetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdSafetyNetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUserIdSafetyNetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdSafetyNetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdSafetyNetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSelfServiceLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Session
}

// Status returns HTTPResponse.Status
func (r PostSelfServiceLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSelfServiceLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfServiceLoginApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registration
}

// Status returns HTTPResponse.Status
func (r GetSelfServiceLoginApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfServiceLoginApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSelfServiceLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSelfServiceLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSelfServiceLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSelfServiceRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrationWithFlowIdResponse
}

// Status returns HTTPResponse.Status
func (r PostSelfServiceRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSelfServiceRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfServiceRegistrationApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registration
}

// Status returns HTTPResponse.Status
func (r GetSelfServiceRegistrationApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfServiceRegistrationApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTiltResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tilt
}

// Status returns HTTPResponse.Status
func (r GetTiltResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTiltResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTiltResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTiltResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTiltResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserWithId
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserWithId
}

// Status returns HTTPResponse.Status
func (r GetUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Setting
}

// Status returns HTTPResponse.Status
func (r GetUserSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUserIdSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWikiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWikiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWikiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWikiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WikiEntry
}

// Status returns HTTPResponse.Status
func (r GetWikiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWikiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWikiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostWikiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWikiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWikiWikiEntryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WikiEntry
}

// Status returns HTTPResponse.Status
func (r GetWikiWikiEntryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWikiWikiEntryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteuserUserIdDiaryWithResponse request returning *DeleteuserUserIdDiaryResponse
func (c *ClientWithResponses) DeleteuserUserIdDiaryWithResponse(ctx context.Context, params *DeleteuserUserIdDiaryParams, reqEditors ...RequestEditorFn) (*DeleteuserUserIdDiaryResponse, error) {
	rsp, err := c.DeleteuserUserIdDiary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteuserUserIdDiaryResponse(rsp)
}

// GetDiaryWithResponse request returning *GetDiaryResponse
func (c *ClientWithResponses) GetDiaryWithResponse(ctx context.Context, params *GetDiaryParams, reqEditors ...RequestEditorFn) (*GetDiaryResponse, error) {
	rsp, err := c.GetDiary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiaryResponse(rsp)
}

// PostDiaryUserIdWithBodyWithResponse request with arbitrary body returning *PostDiaryUserIdResponse
func (c *ClientWithResponses) PostDiaryUserIdWithBodyWithResponse(ctx context.Context, params *PostDiaryUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiaryUserIdResponse, error) {
	rsp, err := c.PostDiaryUserIdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiaryUserIdResponse(rsp)
}

func (c *ClientWithResponses) PostDiaryUserIdWithResponse(ctx context.Context, params *PostDiaryUserIdParams, body PostDiaryUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiaryUserIdResponse, error) {
	rsp, err := c.PostDiaryUserId(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiaryUserIdResponse(rsp)
}

// DeleteMotivatorWithResponse request returning *DeleteMotivatorResponse
func (c *ClientWithResponses) DeleteMotivatorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteMotivatorResponse, error) {
	rsp, err := c.DeleteMotivator(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMotivatorResponse(rsp)
}

// GetMotivatorsUserIdWithResponse request returning *GetMotivatorsUserIdResponse
func (c *ClientWithResponses) GetMotivatorsUserIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMotivatorsUserIdResponse, error) {
	rsp, err := c.GetMotivatorsUserId(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMotivatorsUserIdResponse(rsp)
}

// PostMotivatorWithBodyWithResponse request with arbitrary body returning *PostMotivatorResponse
func (c *ClientWithResponses) PostMotivatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMotivatorResponse, error) {
	rsp, err := c.PostMotivatorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMotivatorResponse(rsp)
}

func (c *ClientWithResponses) PostMotivatorWithResponse(ctx context.Context, body PostMotivatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMotivatorResponse, error) {
	rsp, err := c.PostMotivator(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMotivatorResponse(rsp)
}

// DeleteMotivatorUserIdWithResponse request returning *DeleteMotivatorUserIdResponse
func (c *ClientWithResponses) DeleteMotivatorUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*DeleteMotivatorUserIdResponse, error) {
	rsp, err := c.DeleteMotivatorUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMotivatorUserIdResponse(rsp)
}

// GetMotivatorUserIdWithResponse request returning *GetMotivatorUserIdResponse
func (c *ClientWithResponses) GetMotivatorUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetMotivatorUserIdResponse, error) {
	rsp, err := c.GetMotivatorUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMotivatorUserIdResponse(rsp)
}

// PostMotivatorUserIdWithBodyWithResponse request with arbitrary body returning *PostMotivatorUserIdResponse
func (c *ClientWithResponses) PostMotivatorUserIdWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMotivatorUserIdResponse, error) {
	rsp, err := c.PostMotivatorUserIdWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMotivatorUserIdResponse(rsp)
}

func (c *ClientWithResponses) PostMotivatorUserIdWithResponse(ctx context.Context, userId UserId, body PostMotivatorUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMotivatorUserIdResponse, error) {
	rsp, err := c.PostMotivatorUserId(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMotivatorUserIdResponse(rsp)
}

// DeleteMotivatorUserIdResultMotivatorIdWithResponse request returning *DeleteMotivatorUserIdResultMotivatorIdResponse
func (c *ClientWithResponses) DeleteMotivatorUserIdResultMotivatorIdWithResponse(ctx context.Context, userId UserId, motivatorId MotivatorId, reqEditors ...RequestEditorFn) (*DeleteMotivatorUserIdResultMotivatorIdResponse, error) {
	rsp, err := c.DeleteMotivatorUserIdResultMotivatorId(ctx, userId, motivatorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMotivatorUserIdResultMotivatorIdResponse(rsp)
}

// PostMotivatorUserIdFeedbackMotivatorIdWithBodyWithResponse request with arbitrary body returning *PostMotivatorUserIdFeedbackMotivatorIdResponse
func (c *ClientWithResponses) PostMotivatorUserIdFeedbackMotivatorIdWithBodyWithResponse(ctx context.Context, userId UserId, motivatorId MotivatorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMotivatorUserIdFeedbackMotivatorIdResponse, error) {
	rsp, err := c.PostMotivatorUserIdFeedbackMotivatorIdWithBody(ctx, userId, motivatorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMotivatorUserIdFeedbackMotivatorIdResponse(rsp)
}

func (c *ClientWithResponses) PostMotivatorUserIdFeedbackMotivatorIdWithResponse(ctx context.Context, userId UserId, motivatorId MotivatorId, body PostMotivatorUserIdFeedbackMotivatorIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMotivatorUserIdFeedbackMotivatorIdResponse, error) {
	rsp, err := c.PostMotivatorUserIdFeedbackMotivatorId(ctx, userId, motivatorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMotivatorUserIdFeedbackMotivatorIdResponse(rsp)
}

// DeleteNotificationUserIdWithResponse request returning *DeleteNotificationUserIdResponse
func (c *ClientWithResponses) DeleteNotificationUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*DeleteNotificationUserIdResponse, error) {
	rsp, err := c.DeleteNotificationUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotificationUserIdResponse(rsp)
}

// GetNotificationUserIdWithResponse request returning *GetNotificationUserIdResponse
func (c *ClientWithResponses) GetNotificationUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetNotificationUserIdResponse, error) {
	rsp, err := c.GetNotificationUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationUserIdResponse(rsp)
}

// PostNotificationUserIdWithBodyWithResponse request with arbitrary body returning *PostNotificationUserIdResponse
func (c *ClientWithResponses) PostNotificationUserIdWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotificationUserIdResponse, error) {
	rsp, err := c.PostNotificationUserIdWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotificationUserIdResponse(rsp)
}

func (c *ClientWithResponses) PostNotificationUserIdWithResponse(ctx context.Context, userId UserId, body PostNotificationUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotificationUserIdResponse, error) {
	rsp, err := c.PostNotificationUserId(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotificationUserIdResponse(rsp)
}

// GetSafetyNetWithResponse request returning *GetSafetyNetResponse
func (c *ClientWithResponses) GetSafetyNetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSafetyNetResponse, error) {
	rsp, err := c.GetSafetyNet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSafetyNetResponse(rsp)
}

// DeleteUserUserIdSafetyNetWithResponse request returning *DeleteUserUserIdSafetyNetResponse
func (c *ClientWithResponses) DeleteUserUserIdSafetyNetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*DeleteUserUserIdSafetyNetResponse, error) {
	rsp, err := c.DeleteUserUserIdSafetyNet(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserUserIdSafetyNetResponse(rsp)
}

// GetUserUserIdSafetyNetWithResponse request returning *GetUserUserIdSafetyNetResponse
func (c *ClientWithResponses) GetUserUserIdSafetyNetWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserUserIdSafetyNetResponse, error) {
	rsp, err := c.GetUserUserIdSafetyNet(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUserIdSafetyNetResponse(rsp)
}

// PostUserUserIdSafetyNetWithBodyWithResponse request with arbitrary body returning *PostUserUserIdSafetyNetResponse
func (c *ClientWithResponses) PostUserUserIdSafetyNetWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdSafetyNetResponse, error) {
	rsp, err := c.PostUserUserIdSafetyNetWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdSafetyNetResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdSafetyNetWithResponse(ctx context.Context, userId int, body PostUserUserIdSafetyNetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdSafetyNetResponse, error) {
	rsp, err := c.PostUserUserIdSafetyNet(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdSafetyNetResponse(rsp)
}

// PostSelfServiceLoginWithBodyWithResponse request with arbitrary body returning *PostSelfServiceLoginResponse
func (c *ClientWithResponses) PostSelfServiceLoginWithBodyWithResponse(ctx context.Context, params *PostSelfServiceLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSelfServiceLoginResponse, error) {
	rsp, err := c.PostSelfServiceLoginWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSelfServiceLoginResponse(rsp)
}

func (c *ClientWithResponses) PostSelfServiceLoginWithResponse(ctx context.Context, params *PostSelfServiceLoginParams, body PostSelfServiceLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSelfServiceLoginResponse, error) {
	rsp, err := c.PostSelfServiceLogin(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSelfServiceLoginResponse(rsp)
}

// GetSelfServiceLoginApiWithResponse request returning *GetSelfServiceLoginApiResponse
func (c *ClientWithResponses) GetSelfServiceLoginApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfServiceLoginApiResponse, error) {
	rsp, err := c.GetSelfServiceLoginApi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfServiceLoginApiResponse(rsp)
}

// DeleteSelfServiceLogoutWithResponse request returning *DeleteSelfServiceLogoutResponse
func (c *ClientWithResponses) DeleteSelfServiceLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteSelfServiceLogoutResponse, error) {
	rsp, err := c.DeleteSelfServiceLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSelfServiceLogoutResponse(rsp)
}

// PostSelfServiceRegistrationWithBodyWithResponse request with arbitrary body returning *PostSelfServiceRegistrationResponse
func (c *ClientWithResponses) PostSelfServiceRegistrationWithBodyWithResponse(ctx context.Context, params *PostSelfServiceRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSelfServiceRegistrationResponse, error) {
	rsp, err := c.PostSelfServiceRegistrationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSelfServiceRegistrationResponse(rsp)
}

func (c *ClientWithResponses) PostSelfServiceRegistrationWithResponse(ctx context.Context, params *PostSelfServiceRegistrationParams, body PostSelfServiceRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSelfServiceRegistrationResponse, error) {
	rsp, err := c.PostSelfServiceRegistration(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSelfServiceRegistrationResponse(rsp)
}

// GetSelfServiceRegistrationApiWithResponse request returning *GetSelfServiceRegistrationApiResponse
func (c *ClientWithResponses) GetSelfServiceRegistrationApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfServiceRegistrationApiResponse, error) {
	rsp, err := c.GetSelfServiceRegistrationApi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfServiceRegistrationApiResponse(rsp)
}

// GetTiltWithResponse request returning *GetTiltResponse
func (c *ClientWithResponses) GetTiltWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTiltResponse, error) {
	rsp, err := c.GetTilt(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTiltResponse(rsp)
}

// PostTiltWithBodyWithResponse request with arbitrary body returning *PostTiltResponse
func (c *ClientWithResponses) PostTiltWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTiltResponse, error) {
	rsp, err := c.PostTiltWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTiltResponse(rsp)
}

func (c *ClientWithResponses) PostTiltWithResponse(ctx context.Context, body PostTiltJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTiltResponse, error) {
	rsp, err := c.PostTilt(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTiltResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// PostUserWithBodyWithResponse request with arbitrary body returning *PostUserResponse
func (c *ClientWithResponses) PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserResponse, error) {
	rsp, err := c.PostUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

func (c *ClientWithResponses) PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserResponse, error) {
	rsp, err := c.PostUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

// DeleteUserIdWithResponse request returning *DeleteUserIdResponse
func (c *ClientWithResponses) DeleteUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*DeleteUserIdResponse, error) {
	rsp, err := c.DeleteUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserIdResponse(rsp)
}

// GetUserIdWithResponse request returning *GetUserIdResponse
func (c *ClientWithResponses) GetUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserIdResponse, error) {
	rsp, err := c.GetUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserIdResponse(rsp)
}

// PutUserIdWithBodyWithResponse request with arbitrary body returning *PutUserIdResponse
func (c *ClientWithResponses) PutUserIdWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserIdResponse, error) {
	rsp, err := c.PutUserIdWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutUserIdWithResponse(ctx context.Context, userId UserId, body PutUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserIdResponse, error) {
	rsp, err := c.PutUserId(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdResponse(rsp)
}

// DeleteUserSettingsWithResponse request returning *DeleteUserSettingsResponse
func (c *ClientWithResponses) DeleteUserSettingsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*DeleteUserSettingsResponse, error) {
	rsp, err := c.DeleteUserSettings(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserSettingsResponse(rsp)
}

// GetUserSettingsWithResponse request returning *GetUserSettingsResponse
func (c *ClientWithResponses) GetUserSettingsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserSettingsResponse, error) {
	rsp, err := c.GetUserSettings(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSettingsResponse(rsp)
}

// PostUserUserIdSettingsWithBodyWithResponse request with arbitrary body returning *PostUserUserIdSettingsResponse
func (c *ClientWithResponses) PostUserUserIdSettingsWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdSettingsResponse, error) {
	rsp, err := c.PostUserUserIdSettingsWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdSettingsResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdSettingsWithResponse(ctx context.Context, userId UserId, body PostUserUserIdSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdSettingsResponse, error) {
	rsp, err := c.PostUserUserIdSettings(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdSettingsResponse(rsp)
}

// DeleteWikiWithResponse request returning *DeleteWikiResponse
func (c *ClientWithResponses) DeleteWikiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteWikiResponse, error) {
	rsp, err := c.DeleteWiki(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWikiResponse(rsp)
}

// GetWikiWithResponse request returning *GetWikiResponse
func (c *ClientWithResponses) GetWikiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWikiResponse, error) {
	rsp, err := c.GetWiki(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWikiResponse(rsp)
}

// PostWikiWithBodyWithResponse request with arbitrary body returning *PostWikiResponse
func (c *ClientWithResponses) PostWikiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWikiResponse, error) {
	rsp, err := c.PostWikiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWikiResponse(rsp)
}

func (c *ClientWithResponses) PostWikiWithResponse(ctx context.Context, body PostWikiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWikiResponse, error) {
	rsp, err := c.PostWiki(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWikiResponse(rsp)
}

// GetWikiWikiEntryIdWithResponse request returning *GetWikiWikiEntryIdResponse
func (c *ClientWithResponses) GetWikiWikiEntryIdWithResponse(ctx context.Context, wikiEntryId WikiEntryId, reqEditors ...RequestEditorFn) (*GetWikiWikiEntryIdResponse, error) {
	rsp, err := c.GetWikiWikiEntryId(ctx, wikiEntryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWikiWikiEntryIdResponse(rsp)
}

// ParseDeleteuserUserIdDiaryResponse parses an HTTP response from a DeleteuserUserIdDiaryWithResponse call
func ParseDeleteuserUserIdDiaryResponse(rsp *http.Response) (*DeleteuserUserIdDiaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteuserUserIdDiaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDiaryResponse parses an HTTP response from a GetDiaryWithResponse call
func ParseGetDiaryResponse(rsp *http.Response) (*GetDiaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDiaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Mood
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDiaryUserIdResponse parses an HTTP response from a PostDiaryUserIdWithResponse call
func ParsePostDiaryUserIdResponse(rsp *http.Response) (*PostDiaryUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDiaryUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteMotivatorResponse parses an HTTP response from a DeleteMotivatorWithResponse call
func ParseDeleteMotivatorResponse(rsp *http.Response) (*DeleteMotivatorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMotivatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMotivatorsUserIdResponse parses an HTTP response from a GetMotivatorsUserIdWithResponse call
func ParseGetMotivatorsUserIdResponse(rsp *http.Response) (*GetMotivatorsUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMotivatorsUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Motivator
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMotivatorResponse parses an HTTP response from a PostMotivatorWithResponse call
func ParsePostMotivatorResponse(rsp *http.Response) (*PostMotivatorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMotivatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteMotivatorUserIdResponse parses an HTTP response from a DeleteMotivatorUserIdWithResponse call
func ParseDeleteMotivatorUserIdResponse(rsp *http.Response) (*DeleteMotivatorUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMotivatorUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMotivatorUserIdResponse parses an HTTP response from a GetMotivatorUserIdWithResponse call
func ParseGetMotivatorUserIdResponse(rsp *http.Response) (*GetMotivatorUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMotivatorUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description   *string `json:"description,omitempty"`
			Headline      *string `json:"headline,omitempty"`
			Id            *string `json:"id,omitempty"`
			MediaContents *[]struct {
				Format *N200MediaContentsFormat `json:"format,omitempty"`
				Url    *string                  `json:"url,omitempty"`
			} `json:"mediaContents,omitempty"`
			MotivatorId  *string    `json:"motivatorId,omitempty"`
			Results      *[]string  `json:"results,omitempty"`
			TextContents *[]string  `json:"textContents,omitempty"`
			Timestamp    *time.Time `json:"timestamp,omitempty"`
			Type         *N200Type  `json:"type,omitempty"`

			// May describe a form for input by the user (format to be defined, e.g., JSON Schema).
			UserInputForm *string `json:"userInputForm,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMotivatorUserIdResponse parses an HTTP response from a PostMotivatorUserIdWithResponse call
func ParsePostMotivatorUserIdResponse(rsp *http.Response) (*PostMotivatorUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMotivatorUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteMotivatorUserIdResultMotivatorIdResponse parses an HTTP response from a DeleteMotivatorUserIdResultMotivatorIdWithResponse call
func ParseDeleteMotivatorUserIdResultMotivatorIdResponse(rsp *http.Response) (*DeleteMotivatorUserIdResultMotivatorIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMotivatorUserIdResultMotivatorIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostMotivatorUserIdFeedbackMotivatorIdResponse parses an HTTP response from a PostMotivatorUserIdFeedbackMotivatorIdWithResponse call
func ParsePostMotivatorUserIdFeedbackMotivatorIdResponse(rsp *http.Response) (*PostMotivatorUserIdFeedbackMotivatorIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMotivatorUserIdFeedbackMotivatorIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteNotificationUserIdResponse parses an HTTP response from a DeleteNotificationUserIdWithResponse call
func ParseDeleteNotificationUserIdResponse(rsp *http.Response) (*DeleteNotificationUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNotificationUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNotificationUserIdResponse parses an HTTP response from a GetNotificationUserIdWithResponse call
func ParseGetNotificationUserIdResponse(rsp *http.Response) (*GetNotificationUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Notification
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNotificationUserIdResponse parses an HTTP response from a PostNotificationUserIdWithResponse call
func ParsePostNotificationUserIdResponse(rsp *http.Response) (*PostNotificationUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNotificationUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSafetyNetResponse parses an HTTP response from a GetSafetyNetWithResponse call
func ParseGetSafetyNetResponse(rsp *http.Response) (*GetSafetyNetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSafetyNetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SafetyNetItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserUserIdSafetyNetResponse parses an HTTP response from a DeleteUserUserIdSafetyNetWithResponse call
func ParseDeleteUserUserIdSafetyNetResponse(rsp *http.Response) (*DeleteUserUserIdSafetyNetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserUserIdSafetyNetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserUserIdSafetyNetResponse parses an HTTP response from a GetUserUserIdSafetyNetWithResponse call
func ParseGetUserUserIdSafetyNetResponse(rsp *http.Response) (*GetUserUserIdSafetyNetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserUserIdSafetyNetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SafetyNetItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserUserIdSafetyNetResponse parses an HTTP response from a PostUserUserIdSafetyNetWithResponse call
func ParsePostUserUserIdSafetyNetResponse(rsp *http.Response) (*PostUserUserIdSafetyNetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUserIdSafetyNetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSelfServiceLoginResponse parses an HTTP response from a PostSelfServiceLoginWithResponse call
func ParsePostSelfServiceLoginResponse(rsp *http.Response) (*PostSelfServiceLoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSelfServiceLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSelfServiceLoginApiResponse parses an HTTP response from a GetSelfServiceLoginApiWithResponse call
func ParseGetSelfServiceLoginApiResponse(rsp *http.Response) (*GetSelfServiceLoginApiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfServiceLoginApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSelfServiceLogoutResponse parses an HTTP response from a DeleteSelfServiceLogoutWithResponse call
func ParseDeleteSelfServiceLogoutResponse(rsp *http.Response) (*DeleteSelfServiceLogoutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSelfServiceLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSelfServiceRegistrationResponse parses an HTTP response from a PostSelfServiceRegistrationWithResponse call
func ParsePostSelfServiceRegistrationResponse(rsp *http.Response) (*PostSelfServiceRegistrationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSelfServiceRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrationWithFlowIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSelfServiceRegistrationApiResponse parses an HTTP response from a GetSelfServiceRegistrationApiWithResponse call
func ParseGetSelfServiceRegistrationApiResponse(rsp *http.Response) (*GetSelfServiceRegistrationApiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfServiceRegistrationApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTiltResponse parses an HTTP response from a GetTiltWithResponse call
func ParseGetTiltResponse(rsp *http.Response) (*GetTiltResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTiltResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tilt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTiltResponse parses an HTTP response from a PostTiltWithResponse call
func ParsePostTiltResponse(rsp *http.Response) (*PostTiltResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTiltResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserWithId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserResponse parses an HTTP response from a PostUserWithResponse call
func ParsePostUserResponse(rsp *http.Response) (*PostUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUserIdResponse parses an HTTP response from a DeleteUserIdWithResponse call
func ParseDeleteUserIdResponse(rsp *http.Response) (*DeleteUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserIdResponse parses an HTTP response from a GetUserIdWithResponse call
func ParseGetUserIdResponse(rsp *http.Response) (*GetUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserWithId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUserIdResponse parses an HTTP response from a PutUserIdWithResponse call
func ParsePutUserIdResponse(rsp *http.Response) (*PutUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUserSettingsResponse parses an HTTP response from a DeleteUserSettingsWithResponse call
func ParseDeleteUserSettingsResponse(rsp *http.Response) (*DeleteUserSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserSettingsResponse parses an HTTP response from a GetUserSettingsWithResponse call
func ParseGetUserSettingsResponse(rsp *http.Response) (*GetUserSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Setting
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserUserIdSettingsResponse parses an HTTP response from a PostUserUserIdSettingsWithResponse call
func ParsePostUserUserIdSettingsResponse(rsp *http.Response) (*PostUserUserIdSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUserIdSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWikiResponse parses an HTTP response from a DeleteWikiWithResponse call
func ParseDeleteWikiResponse(rsp *http.Response) (*DeleteWikiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWikiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWikiResponse parses an HTTP response from a GetWikiWithResponse call
func ParseGetWikiResponse(rsp *http.Response) (*GetWikiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWikiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WikiEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostWikiResponse parses an HTTP response from a PostWikiWithResponse call
func ParsePostWikiResponse(rsp *http.Response) (*PostWikiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWikiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWikiWikiEntryIdResponse parses an HTTP response from a GetWikiWikiEntryIdWithResponse call
func ParseGetWikiWikiEntryIdResponse(rsp *http.Response) (*GetWikiWikiEntryIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWikiWikiEntryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WikiEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
